<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Swift 中的常量和变量</title>
    <url>/swift-blogs/posts/c6460431.html</url>
    <content><![CDATA[<h1 id="常量-变量"><a href="#常量-变量" class="headerlink" title="常量 &amp; 变量"></a>常量 &amp; 变量</h1><p>常量一旦被设置就不能被更改，使用关键字<strong>let</strong> 。变量被设置之后是可以被修改的，使用关键字<strong>var</strong>。</p>
<h2 id="声明常量和变量"><a href="#声明常量和变量" class="headerlink" title="声明常量和变量"></a>声明常量和变量</h2><p>常量和变量之后在被声明后才能使用，声明方式如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="type">Int</span> <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">let</span> x:<span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>这段代码的意思是：</p>
<p>“声明一个名为num，数据类型为<strong>Int</strong>，值为8的变量。然后声明一个名为x，数据类型为<strong>Int</strong>，值为10的常量。”</p>
<p>你可以在一行中声明多个常量或变量，使用逗号隔开：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x:<span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span>,y:<span class="type">Int</span> <span class="operator">=</span> <span class="number">12</span>,z:<span class="type">Int</span> <span class="operator">=</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="类型标注"><a href="#类型标注" class="headerlink" title="类型标注"></a>类型标注</h2><p>在上面常量与变量的声明中，我们标识的常量和变量数据类型均为<strong>Int</strong>类型。这意味着变量num和常量x在进行赋值时只能赋<strong>Int</strong>类型的数值。</p>
<p>上面的错误显示的是把一个字符串类型的10赋值给了一个指定类型为<strong>Int</strong>的常量，这在Swift中是不被允许的。</p>
<p>你可以在一行中定义多个相同类型的常量或者变量，只需要在结尾加上数据类型即可：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x,y,z:<span class="type">Int</span></span><br></pre></td></tr></table></figure>

<h2 id="类型安全与类型推断"><a href="#类型安全与类型推断" class="headerlink" title="类型安全与类型推断"></a>类型安全与类型推断</h2><p>Swift是一门类型安全的语言。类型安全的语言可以让你清楚地知道代码可以处理的值的类型。如果你的一部分代码期望获得<strong>String</strong>类型的值，你就不能错误的传给它一个<strong>Int</strong>类型的值。</p>
<p>因为Swift是类型安全的语言，所以Swift在编译的过程中会进行类型检查，任何不匹配的类型都会被标记为错误。</p>
<p>类型检查可以帮助我们在对一个已经声明好的常量或者变量进行赋值时，能够准备无误的赋一个指定类型的数据。但是，类型检查并不意味着我们每次声明时都需要明确指定数据类型，我们可以通过Swift中的类型判断来完成数据类型的指定。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> y <span class="operator">=</span> <span class="number">10.0</span></span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们并没有给变量指定数据类型。Swift在编译的过程中通过类型判断推断x为<strong>Int</strong>类型，y为<strong>Double</strong>类型。</p>
<h2 id="常量与变量的命名"><a href="#常量与变量的命名" class="headerlink" title="常量与变量的命名"></a>常量与变量的命名</h2><p>常量和变量的命名几乎可以使用任何的字符，包括Unicode字符：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 你好 <span class="operator">=</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">var</span> 😃 <span class="operator">=</span>  <span class="string">&quot;😃&quot;</span></span><br><span class="line"><span class="keyword">var</span> `let` <span class="operator">=</span> <span class="string">&quot;let&quot;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，在使用Swift中关键字进行命名是需要添加反引号（&#96;）。</p>
<p>虽然Swift在命名上可以使用很多字符，但是为了开发的方便与后期维护建议开发者在命名时尽量遵循一些标准化的命名规范，例如驼峰式命名法。</p>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的循环</title>
    <url>/swift-blogs/posts/73894dfa.html</url>
    <content><![CDATA[<p>Swift提供了多样化的控制流语句。包括<strong>while</strong>循环；<strong>for-in</strong>循环；<code>if</code>，<code>guard</code>和<code>switch</code>语句用来基于特定的条件执行不同的代码分支。</p>
<span id="more"></span>

<h4 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for-in 循环"></a>for-in 循环</h4><p>使用<strong>for-in</strong>循环来遍历数组，指定范围内的数字或者字符串中的字符。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Felix&quot;</span>,<span class="string">&quot;Rudolf&quot;</span>,<span class="string">&quot;Zora&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好，<span class="subst">\(name)</span>！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">你好，<span class="type">Felix！</span></span><br><span class="line">你好，<span class="type">Rudolf！</span></span><br><span class="line">你好，<span class="type">Zora！</span></span><br></pre></td></tr></table></figure>

<p>我们也可以使用<strong>for-in</strong>循环来遍历字典，遍历字典时我们可以同时遍历出字典中的键和值。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> persons <span class="operator">=</span> [<span class="string">&quot;Felix&quot;</span>:<span class="number">23</span>,<span class="string">&quot;Rudolf&quot;</span>:<span class="number">34</span>,<span class="string">&quot;Zora&quot;</span>:<span class="number">33</span>]</span><br><span class="line"><span class="keyword">for</span> (name,age) <span class="keyword">in</span> persons &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(name)</span> 今年<span class="subst">\(age)</span>岁！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Rudolf</span> 今年<span class="number">34</span>岁！</span><br><span class="line"><span class="type">Felix</span> 今年<span class="number">23</span>岁！</span><br><span class="line"><span class="type">Zora</span> 今年<span class="number">33</span>岁！</span><br></pre></td></tr></table></figure>

<p>循环打印出指定范围内的数字：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环打印出1到5的整数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面的数字循环中我们通过<strong>区间运算符</strong>来辅助实现数字的循环。</p>
</blockquote>
<p>另外，我们在循环时for后面跟着的是一个被隐式声明的常量，我们不再需要使用let关键字再次进行声明。</p>
<p>在某些情况下，当我们只需要指定循环的次数，并不需要用到隐式声明的常量时，我们可以使用通配符“_”来省略声明的常量。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i自加5次</span></span><br><span class="line"><span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">5</span>&#123;</span><br><span class="line">    i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p><strong>while</strong>循环通过判断条件执行分支代码。当条件为true时，执行循环内的代码，否则不行。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> a <span class="operator">&lt;</span> b &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于b&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a小于b</span><br></pre></td></tr></table></figure>

<h5 id="repeat-while"><a href="#repeat-while" class="headerlink" title="repeat-while"></a>repeat-while</h5><p><strong>repeat-while</strong>是while循环的另一种形式，它相当与其他编程语言中的<strong>do-while</strong>循环，在判断循环条件之前它会先去执行一次循环代码块，然后重复循环直到判断条件为false。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于b&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> a <span class="operator">&lt;</span> b</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>循环</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的数据类型</title>
    <url>/swift-blogs/posts/6876d7b8.html</url>
    <content><![CDATA[<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>整数是没有小数部分的数字。整数可以是有符号的或者无符号。Swift提供来8，16，32和64位编码的有符号和无符号整数，例如UInt8表示8位无符号的整数，Int32表示32有符号整数。</p>
<span id="more"></span>

<h5 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h5><p>Swift 提供了一个特殊的整数类型<strong>Int</strong>，长度与当前平台的原生字长相同：</p>
<ul>
<li>在32位平台上，Int和Int32长度相同。</li>
<li>在64位平台上，Int和Int64长度相同。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age:<span class="type">Int</span> <span class="operator">=</span> <span class="number">27</span></span><br></pre></td></tr></table></figure>



<p>除非你需要特定长度的整数，一般来说使用Int就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，Int可以存储的整数范围也可以达到-2,147,483,648~2,147,483,647，大多数时候这已经足够大了。</p>
<h5 id="UInt"><a href="#UInt" class="headerlink" title="UInt"></a>UInt</h5><p>Swift 也提供了一个特殊的无符号类型<strong>UInt</strong>，长度与当前平台的原生字长相同：</p>
<ul>
<li>在32位平台上，<strong>UInt</strong>和<strong>UInt32</strong>长度相同。</li>
<li>在64位平台上，<strong>UInt</strong>和<strong>UInt64</strong>长度相同。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age:<span class="type">UInt</span> <span class="operator">=</span> <span class="number">29</span></span><br></pre></td></tr></table></figure>

<p>如果此时重新赋一个<span style="color:red"><strong>负值</strong></span>， Xcode 将会报错。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">age <span class="operator">=</span> <span class="operator">-</span><span class="number">27</span></span><br></pre></td></tr></table></figure>

<p>错误信息如下：<span style='color:red'>“<strong>Negative integer ‘-27’ overflows when stored into unsigned type ‘UInt’</strong>“</span>。</p>
<blockquote>
<p><strong>注意</strong><br>只在的确需要存储一个和当前平台原生字长度相同的无符号整数的时候才使用 UInt 。其他情况下，推荐使用 Int ，即使已经知道存储的值都是非负的。如同类型安全和类型推断中描述的那样，统一使用 Int 会提高代码的兼容性，同时可以避免不同数字类型之间的转换问题，也符合整数的类型推断。</p>
</blockquote>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数是有小数的数字，例如3.1425926。浮点类型相比整数类型来说能表示更大的范围的值，可以存储比Int更大或者更小的数字。Swift提供来两种有符号的浮点数类型：</p>
<ul>
<li><strong>Double</strong>代表63位的浮点数</li>
<li><strong>Float</strong>代表32位的浮点数</li>
</ul>
<blockquote>
<p><strong>注意</strong><br>Double有至少15位数字的精度，而Float的精度只有6位。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> floatPI: <span class="type">Float</span> <span class="operator">=</span> <span class="number">3.1415926535897932384626433832795028841971693993751058209</span></span><br><span class="line"><span class="keyword">var</span> doublePI: <span class="type">Double</span> <span class="operator">=</span> <span class="number">3.1415926535897932384626433832795028841971693993751058209</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="number">3.141593</span></span><br><span class="line"><span class="number">3.141592653589793</span></span><br></pre></td></tr></table></figure>



<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>Swift有一个基础布尔量类型，就是Bool，布尔量被作为逻辑值来引用，因为它的值只能是真或者假。Swift布尔量提供量两个常量值，<strong>true</strong>和<strong>false</strong>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isLocked: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span> </span><br><span class="line">isLocked <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是一系列字符，例如”Hello world”。字符串类型用String表示。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Felix&quot;</span></span><br></pre></td></tr></table></figure>

<p>多行字符串：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> multiLineString <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello,</span></span><br><span class="line"><span class="string">My name is Felix.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>字符指的是单个字母。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c:<span class="type">Character</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h4><p>可选类型用来处理值可能确实的情况，可选类型表示有值或没有值。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><table>
<thead>
<tr>
<th>类型</th>
<th>大小（字节）</th>
<th>区间值</th>
</tr>
</thead>
<tbody><tr>
<td>Int8</td>
<td>1字节</td>
<td>-128到127</td>
</tr>
<tr>
<td>UInt8</td>
<td>1字节</td>
<td>0到255</td>
</tr>
<tr>
<td>Int32</td>
<td>4字节</td>
<td>-2147483648 到 2147483647</td>
</tr>
<tr>
<td>UInt32</td>
<td>4字节</td>
<td>0 到 4294967295</td>
</tr>
<tr>
<td>Int64</td>
<td>8字节</td>
<td>-9223372036854775808 到 9223372036854775807</td>
</tr>
<tr>
<td>UInt64</td>
<td>8字节</td>
<td>0 到 18446744073709551615</td>
</tr>
<tr>
<td>Float</td>
<td>4字节</td>
<td>1.2E-38 到 3.4E+38 (~6 digits)</td>
</tr>
<tr>
<td>Double</td>
<td>8字节</td>
<td>2.3E-308 到 1.7E+308 (~15 digits)</td>
</tr>
</tbody></table>
<blockquote>
<p>整数类型可以使用<strong>Int.max</strong>和<strong>Int.min</strong>获取Int的最大值和最小值。</p>
</blockquote>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
        <tag>Swift</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的类</title>
    <url>/swift-blogs/posts/338306b2.html</url>
    <content><![CDATA[<p>在Swift中，类是一种引用类型，用于封装数据和方法。类是面向对象编程的基础，它们允许我们创建具有特定属性和方法的自定义数据类型。在这篇文章中，我们将详细介绍Swift中的类及其使用方法。</p>
<h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>在Swift中，类使用<code>class</code>关键字定义。类的定义包括一个可选的名称、一对大括号<code>&#123;&#125;</code>，以及一个或多个属性和方法的定义。类的属性可以是<span style="color:red"><strong>值类型</strong></span>（例如<code>Int</code>、<code>String</code>等），也可以是<span style="color:red"><strong>引用类型</strong></span>（例如数组、字典等）。方法则包含在一个或多个大括号内，并遵循特定的语法规则。</p>
<span id="more"></span>

<p>下面是一个简单的类定义示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is <span class="subst">\(name)</span> and I am <span class="subst">\(age)</span> years old.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们定义了一个名为<code>Person</code>的类，它有两个属性（<code>name</code>和<code>age</code>）和一个方法（<code>sayHello</code>）。<code>init</code>方法是一个特殊的方法，用于初始化类的实例。当创建一个新的<code>Person</code>实例时，我们需要提供一个名字和一个年龄，然后<code>init</code>方法会将这些值分别赋给<code>name</code>和<code>age</code>属性。</p>
<p>定义好一个类之后，我们可以实例化一个类的对象，然后通过<strong>点语法</strong>去访问类的属性和方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person <span class="operator">=</span> <span class="type">Person</span>(name: <span class="string">&quot;Felix&quot;</span>, age: <span class="number">25</span>)</span><br><span class="line">person.sayHello()</span><br><span class="line">person.age <span class="operator">=</span> <span class="number">26</span> </span><br></pre></td></tr></table></figure>



<h2 id="类的构造器和属性访问修饰符"><a href="#类的构造器和属性访问修饰符" class="headerlink" title="类的构造器和属性访问修饰符"></a>类的构造器和属性访问修饰符</h2><p>在Swift中，我们可以使用构造器来初始化类的实例。构造器是一个特殊的函数，它在创建类的实例时被调用。构造器的名称与类名相同，并且没有返回类型。我们可以在构造器中设置实例的属性值。</p>
<p>在上面的<code>Person</code>类中，我们使用了<code>init</code>方法作为构造器。当我们创建一个新的<code>Person</code>实例时，需要提供名字和年龄参数，如下所示：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person <span class="operator">=</span> <span class="type">Person</span>(name: <span class="string">&quot;Alice&quot;</span>, age: <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>此外，我们还可以使用访问修饰符来控制属性和方法的访问权限。Swift提供了四种访问修饰符：<code>public</code>、<code>protected</code>、<code>internal</code>和默认（即不使用任何修饰符）。<strong>默认情况下，所有属性和方法都是公开的（可以在任何地方访问）</strong>。通过使用不同的访问修饰符，我们可以限制属性和方法的可见性，从而提高代码的安全性和可维护性。</p>
<p>例如，我们可以将上面的<code>Person</code>类修改为以下形式，将所有属性和方法设置为私有：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is <span class="subst">\(name)</span> and I am (age) years old.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们再想通过实例化的对象访问 <code>name</code> 和 <code>age</code> 属性时，Xcode 会报以下的错误：</p>
<p> <span style="color:red"><code>&#39;age&#39; is inaccessible due to &#39;private&#39; protection level </code></span></p>
<h2 id="类的继承和多态性"><a href="#类的继承和多态性" class="headerlink" title="类的继承和多态性"></a>类的继承和多态性</h2><p>在Swift中，类可以继承自其他类，从而实现代码的重用和扩展。子类可以继承父类的属性和方法，并可以根据需要添加新的属性和方法。此外，Swift还支持多态性，这意味着我们可以使用父类的引用来操作子类的对象。</p>
<p>下面是一个关于类继承的例子：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 子类独有的属性</span></span><br><span class="line">    <span class="keyword">var</span> school: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">age</span>: <span class="type">Int</span>, <span class="params">school</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.school <span class="operator">=</span> school</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name, age: age)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 子类独有的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">toSchool</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Go to school&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上面的这个例子中，我们定义了一个<code>Student</code> 子类，这个子类继承了<code>Person</code> 父类。这里的继承意味着<code>Student</code> 子类有父类的<code>age</code> 和<code>name</code>属性以及<code>sayHello</code>方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student <span class="operator">=</span> <span class="type">Student</span>(name: <span class="string">&quot;Felix&quot;</span>, age: <span class="number">26</span>, school: <span class="string">&quot;SBS&quot;</span>)</span><br><span class="line">student.toSchool() <span class="comment">// 调用字类方法</span></span><br><span class="line">student.sayHello() <span class="comment">// 调用父类方法</span></span><br></pre></td></tr></table></figure>



<p>在子类中，我们还可以重写父类的方法，使用 <code>override</code> 关键字：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 重写父类的方法</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is<span class="subst">\(name)</span> and I am <span class="subst">\(age)</span> years old. my school is <span class="subst">\(school)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>类</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的枚举</title>
    <url>/swift-blogs/posts/251de72f.html</url>
    <content><![CDATA[<h3 id="Swift-中的枚举"><a href="#Swift-中的枚举" class="headerlink" title="Swift 中的枚举"></a>Swift 中的枚举</h3><p>在计算机编程中，枚举是一种数据类型，用于定义一定范围内的有名称的值。Swift语言中的枚举是强大且灵活的工具，我们可以在多种场景中使用它们，包括但不限于处理特定类型的数据、创建自定义的错误类型以及实现特定的设计模式。</p>
<h4 id="定义和基本用法"><a href="#定义和基本用法" class="headerlink" title="定义和基本用法"></a>定义和基本用法</h4><p>在Swift中，我们使用<code>enum</code>关键字来定义枚举。下面是一个简单的例子，展示了如何定义和使用一个名为<code>Weekday</code>的枚举，表示一周中的每一天：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Weekday</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Monday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Tuesday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Wednesday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Thursday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Friday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Saturday</span>  </span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sunday</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>我们可以使用这个枚举来处理与一周中的某天相关的数据。例如，我们可以创建一个函数，根据给定的<code>Weekday</code>枚举值返回一周中的相应天数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">dayOfWeek</span>(<span class="keyword">_</span> <span class="params">weekday</span>: <span class="type">Weekday</span>) -&gt; <span class="type">String</span> &#123;  </span><br><span class="line">    <span class="keyword">switch</span> weekday &#123;  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Monday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Tuesday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tuesday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Wednesday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wednesday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Thursday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Thursday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Friday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Friday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Saturday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Saturday&quot;</span>  </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Sunday</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Sunday&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们可以像下面这样使用这个函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> monday <span class="operator">=</span> <span class="type">Weekday</span>.<span class="type">Monday</span>  </span><br><span class="line"><span class="built_in">print</span>(dayOfWeek(monday)) <span class="comment">// 输出：Monday</span></span><br></pre></td></tr></table></figure>

<h4 id="关联值"><a href="#关联值" class="headerlink" title="关联值"></a>关联值</h4><p>Swift的枚举还可以定义关联值，这使得枚举能够更丰富地表达信息。例如，我们创建一个枚举表示用户的登录状态，并为其关联一个错误消息：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserLoginStatus</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> success(<span class="type">String</span>)  </span><br><span class="line">    <span class="keyword">case</span> failure(<span class="type">String</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>UserLoginStatus</code>枚举有两个cases：<code>success</code>和<code>failure</code>。这两个cases都关联了一个String类型的值，表示成功或失败的状态信息。我们可以像下面这样使用这个枚举：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> successfulLogin <span class="operator">=</span> <span class="type">UserLoginStatus</span>.success(<span class="string">&quot;登录成功&quot;</span>)  </span><br><span class="line"><span class="keyword">let</span> failedLogin <span class="operator">=</span> <span class="type">UserLoginStatus</span>.failure(<span class="string">&quot;登录失败，请检查用户名和密码&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(successfulLogin) <span class="comment">// 输出：登录成功  </span></span><br><span class="line"><span class="built_in">print</span>(failedLogin) <span class="comment">// 输出：登录失败，请检查用户名和密码</span></span><br></pre></td></tr></table></figure>

<h4 id="在switch语句中使用枚举"><a href="#在switch语句中使用枚举" class="headerlink" title="在switch语句中使用枚举"></a>在switch语句中使用枚举</h4><p>由于Swift的枚举是全特性的，所以在switch语句中可以使用枚举的所有case值。这对于处理多种可能的枚举值非常有用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> someWeekday: <span class="type">Weekday</span> <span class="operator">=</span> .<span class="type">Wednesday</span>  </span><br><span class="line"><span class="keyword">switch</span> someWeekday &#123;  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Monday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期一&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Tuesday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期二&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Wednesday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期三&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Thursday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期四&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Friday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期五&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Saturday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期六&quot;</span>)  </span><br><span class="line"><span class="keyword">case</span> .<span class="type">Sunday</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是星期日&quot;</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用原始值和匿名枚举"><a href="#使用原始值和匿名枚举" class="headerlink" title="使用原始值和匿名枚举"></a>使用原始值和匿名枚举</h4><p>有时候，我们可能不需要为枚举的每个case关联一个特定的值，或者我们希望将所有值都关联到一个单一的原始值。在这种情况下，我们可以使用原始值和匿名枚举。例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span>乏味的颜色: <span class="title class_">Int</span> &#123;  </span><br><span class="line">    <span class="keyword">case</span> red <span class="operator">=</span> <span class="number">1</span>, green <span class="operator">=</span> <span class="number">2</span>, blue <span class="operator">=</span> <span class="number">3</span>, yellow <span class="operator">=</span> <span class="number">4</span>, orange <span class="operator">=</span> <span class="number">5</span>,  <span class="comment">// 可以根据需要添加更多颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的运算符</title>
    <url>/swift-blogs/posts/c2a3f429.html</url>
    <content><![CDATA[<h3 id="Swift-中的运算符"><a href="#Swift-中的运算符" class="headerlink" title="Swift 中的运算符"></a>Swift 中的运算符</h3><p>运算符是一个符号，用于告诉编译器执行一个数学或逻辑运算。</p>
<h4 id="专门用语"><a href="#专门用语" class="headerlink" title="专门用语"></a>专门用语</h4><p>运算符包括一元、二元、三元：</p>
<ul>
<li>一元运算符对一个目标进行操作，例如-a。</li>
<li>二元运算符对两个目标进行操作，例如a+b。</li>
<li>三元运算符操作三个目标，Swift语言有仅只有一个三元运算符（a ? b : c）。</li>
</ul>
<p>Swift提供来以下几种运算符：</p>
<ul>
<li>算术运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>区间运算符</li>
<li>其他运算符</li>
</ul>
<span id="more"></span>

<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>Swift提供来四种标准的算术运算符：</p>
<ul>
<li>加（+）</li>
<li>减（-）</li>
<li>乘（*）</li>
<li>除（&#x2F;）</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="operator">+</span> <span class="number">2</span> <span class="comment">//equals 3</span></span><br><span class="line"><span class="number">5</span> <span class="operator">-</span> <span class="number">3</span> <span class="comment">//equals 2</span></span><br><span class="line"><span class="number">2</span> <span class="operator">*</span> <span class="number">3</span> <span class="comment">//equals 6</span></span><br><span class="line"><span class="number">10</span> <span class="operator">/</span> <span class="number">2</span>  <span class="comment">//equals 5</span></span><br></pre></td></tr></table></figure>

<p>加法运算符同时支持String的拼接：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello ,&quot;</span> <span class="operator">+</span> <span class="string">&quot;World&quot;</span> <span class="comment">//equals &quot;Hello, World&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><p>Swift支持所有C的所有标准比较运算符：</p>
<ul>
<li>相等 （a &#x3D;&#x3D; b）</li>
<li>不像等（a !&#x3D; b）</li>
<li>大于（a &gt; b）</li>
<li>小于（a &lt; b）</li>
<li>大于等于（a &gt;&#x3D; b）</li>
<li>小于等于（a &lt;&#x3D; b）</li>
</ul>
<p>每个比较运算符都会返回一个Bool来表示比较的结果是否为真：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="operator">==</span> <span class="number">2</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">2</span> <span class="operator">!=</span> <span class="number">3</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">2</span> <span class="operator">&gt;</span> <span class="number">1</span>  <span class="comment">//true</span></span><br><span class="line"><span class="number">2</span> <span class="operator">&lt;</span> <span class="number">1</span> <span class="comment">//false </span></span><br><span class="line"><span class="number">1</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="comment">//true</span></span><br><span class="line"><span class="number">2</span> <span class="operator">&lt;=</span> <span class="number">3</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Swift同时也提供两个等价运算符（&#x3D;&#x3D;&#x3D; 和 !&#x3D;&#x3D; ）,你可以使用它们来判断两个对象的引用是否相同。</p>
</blockquote>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符可以修改或者合并布尔逻辑值true和false。Swift提供 以下三种标准的逻辑运算符：</p>
<ul>
<li>逻辑非 （ !a ）：对a的布尔值取反；</li>
<li>逻辑与 （ a&amp;&amp;b ）：若a和b均为true,则结果为true；若a和b中有一个或两个都为false，则结果为false。</li>
<li>逻辑或 （ a||b ）：若a和b其中一个为true，则结果为true。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a:<span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span> </span><br><span class="line"><span class="keyword">var</span> b:<span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="operator">!</span>a  <span class="comment">//false</span></span><br><span class="line">a<span class="operator">&amp;&amp;</span>b <span class="literal">false</span></span><br><span class="line">a<span class="operator">||</span>b <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符用来对二位进制位进行操作，Swift提供以下几种位运算符：</p>
<ul>
<li>取反（～）</li>
<li>按位与（&amp;）</li>
<li>按位或（|）</li>
<li>按位异或（^）</li>
</ul>
<table>
<thead>
<tr>
<th>p</th>
<th>q</th>
<th>p&amp;q</th>
<th>p</th>
<th>q</th>
<th>p^q</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody></table>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符（a &#x3D; b）可是初始化或者更新a的值为b:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">5</span></span><br><span class="line">a <span class="operator">=</span> b <span class="comment">//此时，a的值为10</span></span><br></pre></td></tr></table></figure>

<p>除了简单的赋值运算符，Swift还提供了组合赋值运算符。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">10</span> </span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c <span class="operator">+=</span> a <span class="comment">//  c = c+a</span></span><br><span class="line">c <span class="operator">-=</span> a  <span class="comment">// c = c - a</span></span><br><span class="line">c <span class="operator">*=</span> a <span class="comment">// c = c * a</span></span><br><span class="line">c <span class="operator">/=</span> a  <span class="comment">// c = c / a</span></span><br><span class="line">c <span class="operator">%=</span> a  <span class="comment">// c = c % a</span></span><br></pre></td></tr></table></figure>

<h4 id="区间运算符"><a href="#区间运算符" class="headerlink" title="区间运算符"></a>区间运算符</h4><p>Swift包含了两个区间运算符，他们表示一个范围的值的便捷方式。</p>
<h5 id="闭区间运算符（a…b）定义了从a到b的一组范围，并且包含了a和b。a的值不能大于b。"><a href="#闭区间运算符（a…b）定义了从a到b的一组范围，并且包含了a和b。a的值不能大于b。" class="headerlink" title="闭区间运算符（a…b）定义了从a到b的一组范围，并且包含了a和b。a的值不能大于b。"></a>闭区间运算符（a…b）定义了从a到b的一组范围，并且包含了a和b。a的值不能大于b。</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment">//循环打印出1～5的整数，包括1和5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于循环控制流的内容将在后续内容中出现。</p>
</blockquote>
<h5 id="半开区间运算符"><a href="#半开区间运算符" class="headerlink" title="半开区间运算符"></a>半开区间运算符</h5><p>半开区间运算符（a..&lt;b）定义了从a到b但不包括b的区间。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment">//循环打印出1～4的整数,包括4，不包括5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="单侧区间"><a href="#单侧区间" class="headerlink" title="单侧区间"></a>单侧区间</h5><p>单侧区间主要用在数组的遍历。当我们需要遍历数组中的指定索引前或者后的元素时可以使用单侧区间。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历数组items索引2后的所有元素</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items[<span class="number">2</span><span class="operator">...</span>]&#123;</span><br><span class="line">    <span class="built_in">print</span>(item) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历数组items索引2前的所有元素</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items[<span class="operator">...</span><span class="number">2</span>]&#123;</span><br><span class="line">    <span class="built_in">print</span>(item) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组items索引2前的所有元素,不包括索引2的元素</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items[<span class="operator">..&lt;</span><span class="number">2</span>]&#123;</span><br><span class="line">    <span class="built_in">print</span>(item) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>三元条件运算符是一种有三部分的特殊运算符，它类似于 question ? answer1 : answer2。如果question为真，则会判断answer1并且返回它的值；否则它判断为answer2并且返回它的值。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> question &#123;</span><br><span class="line">    answer1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    answer2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的结构体</title>
    <url>/swift-blogs/posts/8745e5a7.html</url>
    <content><![CDATA[<h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><p>在Swift中，结构体是一种值类型，用于组合不同类型的值。它们可以被视为小型的数据模型，用于存储一组相关的数据。</p>
<h3 id="结构体的主要特点"><a href="#结构体的主要特点" class="headerlink" title="结构体的主要特点"></a>结构体的主要特点</h3><ol>
<li><strong>数据组合</strong>：结构体可以将不同类型的值组合在一起，形成一个有意义的数据结构。这使得结构体非常适合用于描述现实世界中的对象或数据模型。</li>
<li><strong>封装</strong>：结构体可以将数据封装在一起，形成一个单一的、可操作的数据单元。这有助于隐藏内部实现细节，提高代码的可读性和可维护性。</li>
<li><strong>代码复用</strong>：结构体可以通过定义公共的属性和方法，实现代码的复用。这可以在不同的代码片段中重复使用相同的结构体定义，提高代码的效率和可读性。</li>
<li><strong>数据类型安全</strong>：结构体是类型安全的，这意味着在编译时可以检测到类型错误。这有助于减少运行时错误，提高代码的稳定性和安全性。</li>
</ol>
<span id="more"></span>

<p>此外，结构体还具有以下特点：</p>
<ol>
<li><strong>值类型</strong>：结构体是值类型，这意味着当我们将一个结构体赋值给一个变量或者作为函数的参数时，它会进行一次深复制。这意味着修改一个结构体的副本不会影响原始结构体。</li>
<li><strong>语法简单</strong>：在Swift中定义结构体的语法非常简单。我们只需要使用<code>struct</code>关键字，后面跟着结构体的名称和定义它的变量和方法。</li>
<li><strong>内存管理简单</strong>：由于结构体通常存储的是基本数据类型和其他结构体，因此它们的内存管理相对简单。这使得使用结构体比使用类更加高效，尤其是在处理大量数据时。</li>
<li><strong>适用于小型对象</strong>：由于结构体的内存占用较小，因此它们更适合用于描述小型对象或数据模型。对于大型对象或需要复杂行为的数据类型，类可能是更好的选择。</li>
</ol>
<h3 id="定义一个结构体"><a href="#定义一个结构体" class="headerlink" title="定义一个结构体"></a>定义一个结构体</h3><p>让我们通过一个示例来深入理解结构体的使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> grade: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">updateAge</span>(<span class="params">newAge</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        age <span class="operator">=</span> newAge</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们定义了一个名为<code>Student</code>的结构体，它包含三个属性：<code>name</code>、<code>age</code>和<code>grade</code>，分别表示学生的姓名、年龄和年级。我们还定义了一个名为<code>updateAge</code>的方法，用于更新学生的年龄。</p>
<p>我们可以像下面这样创建一个<code>Student</code>实例并设置它的属性值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> student1 <span class="operator">=</span> <span class="type">Student</span>(name: <span class="string">&quot;张三&quot;</span>, age: <span class="number">20</span>, grade: <span class="string">&quot;大一&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.name) <span class="comment">// 输出 &quot;张三&quot;</span></span><br><span class="line"><span class="built_in">print</span>(student1.age) <span class="comment">// 输出 &quot;20&quot;</span></span><br><span class="line"><span class="built_in">print</span>(student1.grade) <span class="comment">// 输出 &quot;大一&quot;</span></span><br><span class="line"></span><br><span class="line">student1.updateAge(newAge: <span class="number">21</span>) <span class="comment">// 更新学生年龄为21</span></span><br><span class="line"><span class="built_in">print</span>(student1.age) <span class="comment">// 输出 &quot;21&quot;</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们通过创建<code>Student</code>实例并设置它的属性值来描述一个学生对象。然后，我们使用<code>updateAge</code>方法来更新学生的年龄。请注意，由于<code>updateAge</code>方法修改了结构体的属性值，因此它被标记为<code>mutating</code>。这是因为在Swift中，非变异方法不能修改结构体的属性值。</p>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>结构体</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 中的集合类型</title>
    <url>/swift-blogs/posts/5f278529.html</url>
    <content><![CDATA[<p>Swift 语言提供 <code>Arrays</code>、<code>Sets</code> 和 <code>Dictionaries</code> 三种基本的集合类型用来存储集合数据。<strong>数组（Arrays）</strong>是有序数据的集。<strong>集合（Sets）</strong>是无序无重复数据的集。<strong>字典（Dictionaries）</strong>是无序的键值对的集。</p>
<p>Swift 语言中的 <code>Arrays</code>、<code>Sets</code> 和 <code>Dictionaries</code> 中存储的数据值<strong>类型必须明确</strong>。这意味着我们不能把错误的数据类型插入其中。</p>
<span id="more"></span>

<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中，这意味着数组中的元素是可以重复的。</p>
<h5 id="创建一个空数组"><a href="#创建一个空数组" class="headerlink" title="创建一个空数组"></a>创建一个空数组</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someInts <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">var</span> someStr:[<span class="type">String</span>] <span class="operator">=</span> []</span><br></pre></td></tr></table></figure>

<h5 id="创建一个带有默认值的数组"><a href="#创建一个带有默认值的数组" class="headerlink" title="创建一个带有默认值的数组"></a>创建一个带有默认值的数组</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> threeDouble <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0.3</span>, count: <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(threeDouble)</span><br></pre></td></tr></table></figure>

<p>这里我们使用<code>Array</code>默认构造方法创建了一个长度大小为3，初始元素值为0.3的双精度类型的数组。参数说明：</p>
<ul>
<li>repeating:初始时元素的值</li>
<li>count：元素的个数或者数组的长度</li>
</ul>
<p>此时，打印数组的显示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0.3, 0.3, 0.3]</span><br></pre></td></tr></table></figure>

<h5 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h5><p>我们可以根据数组的索引来访问数组中的元素，不过需要注意的一点是数组的索引是从0开始的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameArr <span class="operator">=</span> [<span class="string">&quot;Felix&quot;</span>,<span class="string">&quot;Zhao&quot;</span>,<span class="string">&quot;Rudolf&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一个元素<span class="subst">\(nameArr[<span class="number">0</span>])</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二个元素<span class="subst">\(nameArr[<span class="number">1</span>])</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第三个元素<span class="subst">\(nameArr[<span class="number">1</span>])</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="修改数组"><a href="#修改数组" class="headerlink" title="修改数组"></a>修改数组</h5><h6 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h6><p>我们可以使用<code>append</code>方法或者赋值运算符<code>+=</code>将一个元素添加到数组的末尾。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">nameArr.append(<span class="string">&quot;Wells&quot;</span>)</span><br><span class="line">nameArr <span class="operator">+=</span> [<span class="string">&quot;Wells&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>此时的数组为：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;Felix&quot;</span>, <span class="string">&quot;Zhao&quot;</span>, <span class="string">&quot;Rudolf&quot;</span>, <span class="string">&quot;Wells&quot;</span>, <span class="string">&quot;Wells&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="循环遍历数组"><a href="#循环遍历数组" class="headerlink" title="循环遍历数组"></a>循环遍历数组</h5><p>我们可以使用<code>for-in</code>循环来遍历数组中的每一个元素。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameArr &#123;</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们同时需要每个元素的值和对应的索引，我们可以使用<code>enumerate()</code>方法来遍历数组。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (index,name) <span class="keyword">in</span> nameArr.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前索引:<span class="subst">\(index)</span>,当前值：<span class="subst">\(name)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">当前索引:<span class="number">0</span>,当前值：<span class="type">Felix</span></span><br><span class="line">当前索引:<span class="number">1</span>,当前值：<span class="type">Zhao</span></span><br><span class="line">当前索引:<span class="number">2</span>,当前值：<span class="type">Rudolf</span></span><br><span class="line">当前索引:<span class="number">3</span>,当前值：<span class="type">Wells</span></span><br></pre></td></tr></table></figure>

<h5 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h5><p>当我们有两个数据类型相同数组需要合并时，可以使用<code>+</code>运算符来合并数组。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nameArr <span class="operator">=</span> [<span class="string">&quot;Felix&quot;</span>,<span class="string">&quot;Zhao&quot;</span>,<span class="string">&quot;Rudolf&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newNameArr <span class="operator">=</span> [<span class="string">&quot;Lily&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newArr <span class="operator">=</span> newNameArr <span class="operator">+</span> nameArr</span><br></pre></td></tr></table></figure>

<p>此时，newArr的元素为：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;Lily&quot;</span>, <span class="string">&quot;Felix&quot;</span>, <span class="string">&quot;Zhao&quot;</span>, <span class="string">&quot;Rudolf&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="数组相关属性"><a href="#数组相关属性" class="headerlink" title="数组相关属性"></a>数组相关属性</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(nameArr.count) </span><br><span class="line"><span class="built_in">print</span>(nameArr.isEmpty) </span><br></pre></td></tr></table></figure>

<p><code>.count</code>用来获取数组元素的个数；<code>.isEmpty</code>判断数组是否为空，返回值为布尔值。</p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>Swift中的字典是一个用来存储无序的相同类型数据的集合。字典中每个值(value)对应一个唯一的键(key)，键被作为值在这个字典里的标识符。字典里的数据是没有具体顺序的，我们只能通过值对应的键来访问到这个数据。另外，字典中的键可以是整型或者字符串类型，但是一个字典里键的类型必须是唯一的。</p>
<h5 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h5><p>Swift中的字典使用<code>Dictionary&lt;Key,Value&gt;</code>的形式定义，其中<code>Key</code>是字典中键的数据类型，<code>Value</code>是字典中值的数据类型。我们使用这样形式来定义一个空的字典：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyDcit <span class="operator">=</span> <span class="type">Dictionary</span>&lt;<span class="type">String</span>,<span class="type">String</span>&gt;()</span><br></pre></td></tr></table></figure>

<p>Swift中也给我们提供了一种简化的语法来定义字典：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyDcit <span class="operator">=</span> [<span class="type">String</span>:<span class="type">String</span>]()</span><br></pre></td></tr></table></figure>

<p>两种方式都是定义了一个键和值都为字符串类型的空字典，在实际使用过程中，我们更多的是使用后面简化的定义方法。</p>
<p>在项目开发中，如果我们只需要定义一个字典，但是不需要对它进行初始化操作的话，我们可以使用下面的这中方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dic:[<span class="type">String</span>:<span class="type">String</span>]<span class="operator">!</span></span><br></pre></td></tr></table></figure>

<h5 id="字典的访问与修改"><a href="#字典的访问与修改" class="headerlink" title="字典的访问与修改"></a>字典的访问与修改</h5><p>我们可以根据键来修改字典中对应的值，我们也可以使用一些内置的方法来添加、删除元素。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countryDic:[<span class="type">String</span>:<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;JP&quot;</span>:<span class="string">&quot;日本&quot;</span>,<span class="string">&quot;CN&quot;</span>:<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;UK&quot;</span>:<span class="string">&quot;英国&quot;</span>,<span class="string">&quot;FR&quot;</span>:<span class="string">&quot;法国&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(countryDic[<span class="string">&quot;CN&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(countryDic[<span class="string">&quot;JP&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>在上面的实例代码中，我们定义了一个键为国家英文缩写，值为国家的中文简写。我们分别使用键<code>CN</code>和<code>JP</code>访问字典。</p>
<p>当我们需要字典中添加一个新的元素时候，可以使用以下方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">countryDic[<span class="string">&quot;IN&quot;</span>] <span class="operator">=</span> <span class="string">&quot;印度&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们需要修改字典中的某个元素的值，使用以下方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">countryDic[<span class="string">&quot;CN&quot;</span>] <span class="operator">=</span> <span class="string">&quot;中华人民共和国&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们发现，我们添加新的元素和修改原有元素的值的方法是一样的。这是因为当我们通过键去修改字典的时候，会根据键名先去查询字典中是否包含对应的键名，如果包含的话就修改对应的值，如果不包含就添加新的元素。</p>
<p>经过上面的添加和修改之后，此时的字典元素如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;UK&quot;</span>: <span class="string">&quot;英国&quot;</span>, <span class="string">&quot;JP&quot;</span>: <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;FR&quot;</span>: <span class="string">&quot;法国&quot;</span>, <span class="string">&quot;CN&quot;</span>: <span class="string">&quot;中华人民共和国&quot;</span>, <span class="string">&quot;IN&quot;</span>: <span class="string">&quot;印度&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>我们经常会遇到根据键名去删除字典中对应的元素，这时，我们可以使用以下方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">countryDic.removeValue(forKey: <span class="string">&quot;CN&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>我们经常会使用到的方法还有：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> index <span class="operator">=</span> countryDic.index(countryDic.startIndex, offsetBy: <span class="number">1</span>)</span><br><span class="line">countryDic.remove(at: index)  <span class="comment">//根据指定的索引删除元素</span></span><br><span class="line">countryDic.removeAll() <span class="comment">//清空字典</span></span><br></pre></td></tr></table></figure>

<h5 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h5><p>在之前的学习中，我们使用了<code>for-in</code>循环来遍历数组，同样的我们也可以使用<code>for-in</code>来遍历字典，不同的是遍历字典返回的是每个元素对应的键和值。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (key,value) <span class="keyword">in</span> countryDic &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;键：<span class="subst">\(key)</span>,值：<span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，我们也可以值循环遍历出字典的键或者值。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> countryDic.keys &#123;</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span>  countryDic.values &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外，在学习数组的时候，我们使用<code>isEmpty</code>属性来判断一个数组是否为空，我们同样可以使用这个方法来判断字典是否为空。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>Swift 中的集合（Set）是一种无序的、不重复的数据结构，它允许你存储不同类型的元素。集合的主要用途是检查元素是否存在于集合中，因为集合中的<strong>元素是唯一</strong>的，所以当你尝试添加一个已经存在的元素时，集合不会发生变化。</p>
<h5 id="创建一个集合"><a href="#创建一个集合" class="headerlink" title="创建一个集合"></a>创建一个集合</h5><p>创建集合的常见方法是使用字面量语法或者初始化器（initializer）。下面是一些关于如何创建和使用集合的示例：</p>
<ol>
<li>使用字面量语法创建集合：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;() <span class="comment">// 创建一个空的整数集合</span></span><br><span class="line"><span class="keyword">let</span> fruits <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">String</span>&gt;(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>) <span class="comment">// 创建一个包含三个字符串元素的集合</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用初始化器创建集合：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emptySet: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> [] <span class="comment">// 创建一个空的整数集合</span></span><br><span class="line"><span class="keyword">var</span> fruitsSet <span class="operator">=</span> <span class="type">Set</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>]) <span class="comment">// 创建一个包含三个字符串元素的集合</span></span><br><span class="line"><span class="keyword">var</span> mixedSet: <span class="type">Set</span>&lt;<span class="keyword">Any</span>&gt; <span class="operator">=</span> [<span class="number">1</span>, <span class="string">&quot;apple&quot;</span>, <span class="number">3.14</span>] <span class="comment">// 创建一个包含整数和浮点数的混合类型集合</span></span><br></pre></td></tr></table></figure>

<h5 id="集合中元素的访问、修改和删除"><a href="#集合中元素的访问、修改和删除" class="headerlink" title="集合中元素的访问、修改和删除"></a>集合中元素的访问、修改和删除</h5><p>向集合中添加新的元素使用<code>insert</code> 方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">numbers.insert(<span class="number">1</span>) <span class="comment">// 添加一个元素到集合中</span></span><br><span class="line">fruits.insert(<span class="string">&quot;grape&quot;</span>) <span class="comment">// 向集合中添加一个元素，如果元素已经存在，则不会改变集合</span></span><br></pre></td></tr></table></figure>

<p>使用<code>remove</code> 方法移除集合中的元素：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">numbers.remove(<span class="number">1</span>) <span class="comment">// 从集合中移除一个元素，如果元素不存在，则不会改变集合</span></span><br><span class="line">fruits.remove(<span class="string">&quot;banana&quot;</span>) <span class="comment">// 从集合中移除一个元素，如果元素不存在，则不会改变集合</span></span><br></pre></td></tr></table></figure>

<h5 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h5><p>集合的遍历和数组的遍历类似，使用 <code>for-in</code>循环语句。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">    <span class="built_in">print</span>(number) <span class="comment">// 输出集合中的每个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits &#123;</span><br><span class="line">    <span class="built_in">print</span>(fruit) <span class="comment">// 输出集合中的每个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="检查元素是否存在于集合中"><a href="#检查元素是否存在于集合中" class="headerlink" title="检查元素是否存在于集合中"></a>检查元素是否存在于集合中</h5><p>判断一个元素是否存在于集合中可以使用<code>contains</code> 方法。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> fruits.contains(<span class="string">&quot;apple&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;苹果存在于集合中&quot;</span>) <span class="comment">// 如果集合包含指定的元素，则输出相应的信息</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;苹果不存在于集合中&quot;</span>) <span class="comment">// 如果集合不包含指定的元素，则输出相应的信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="获取集合的大小"><a href="#获取集合的大小" class="headerlink" title="获取集合的大小"></a>获取集合的大小</h5><p>获取集合的大小或元素的数量使用<code>count</code> 属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> size <span class="operator">=</span> fruits.count <span class="comment">// 获取集合中的元素个数</span></span><br></pre></td></tr></table></figure>

<h5 id="判断两个集合是否相等（即它们包含相同的元素）"><a href="#判断两个集合是否相等（即它们包含相同的元素）" class="headerlink" title="判断两个集合是否相等（即它们包含相同的元素）"></a>判断两个集合是否相等（即它们包含相同的元素）</h5><p>判断两个集合是否相等可以使用<code>==</code> 运算符。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> setA <span class="operator">=</span> <span class="type">Set</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>])</span><br><span class="line"><span class="keyword">let</span> setB <span class="operator">=</span> <span class="type">Set</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>])</span><br><span class="line"><span class="keyword">let</span> isEqual <span class="operator">=</span> setA <span class="operator">==</span> setB <span class="comment">// 判断两个集合是否相等，如果相等则返回 true，否则返回 false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Foundation</tag>
        <tag>Swift</tag>
        <tag>集合类型</tag>
        <tag>数组</tag>
        <tag>集合</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 控件之 Text</title>
    <url>/swift-blogs/posts/c90f7d11.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在 SwiftUI 中，如果我们想要显示文本内容，可以使用 <strong>Text</strong> 控件。</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="常用的属性设置"><a href="#常用的属性设置" class="headerlink" title="常用的属性设置"></a>常用的属性设置</h3><h4 id="设置文字的颜色"><a href="#设置文字的颜色" class="headerlink" title="设置文字的颜色"></a>设置文字的颜色</h4><p>通过<code>foregroundColor</code> 设置文字的颜色：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">     .foregroundColor(.black)</span><br></pre></td></tr></table></figure>

<p>**<span style="color:red">注意</span>**，在 <span style="color:red"> Xcode 15.0</span>中，Apple 更推荐我们使用下面的方式设置文字的颜色，而且上面的修饰器将会在不久后被移除：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">    .foregroundStyle(.black)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="设置字体的大小"><a href="#设置字体的大小" class="headerlink" title="设置字体的大小"></a>设置字体的大小</h4><p>通过 <code>font</code> 设置字体的大小：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">    .foregroundStyle(.black)</span><br><span class="line">    .font(.title)</span><br></pre></td></tr></table></figure>

<p>在上面代码中，我们直接使用了Apple 已经设计好的 <strong>Dynamic Type sizes</strong> 字体大小，详细介绍可以在 <a href="">《Human Interface Guidelines》</a>中找到  <a href="https://developer.apple.com/design/human-interface-guidelines/typography#iOS-iPadOS-Dynamic-Type-sizes">iOS, iPadOS Dynamic Type sizes</a>。</p>
<p>除了使用 Apple 设计的动态尺寸大小的字体，我们也可以使用下面的方式定义字体的大小：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.font(.system(size: <span class="number">12</span>))</span><br></pre></td></tr></table></figure>

<h4 id="设置字重"><a href="#设置字重" class="headerlink" title="设置字重"></a>设置字重</h4><p>设置字重可以使用 <code>fontWeight</code> :</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.fontWeight(.bold)</span><br></pre></td></tr></table></figure>

<p>如果只是对字体进行<strong>加粗</strong>操作，可以直接使用下面的<strong>修饰器</strong> ：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.bold()</span><br></pre></td></tr></table></figure>

<p><strong><span style="color:red">注意</span></strong> ，上面的两种设置字重的方式均只能在 <span style="color:red">iOS 16.0</span> 之后的系统中可用。</p>
<h4 id="设置字体的对齐方式"><a href="#设置字体的对齐方式" class="headerlink" title="设置字体的对齐方式"></a>设置字体的对齐方式</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.multilineTextAlignment(.leading) <span class="comment">// 左对齐 </span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>.center</code>： 居中对齐；</li>
<li><code>.leading</code> ： 左对齐；</li>
<li><code>.trailing</code>： 右对齐。</li>
</ul>
<h4 id="限制文本显示的行数"><a href="#限制文本显示的行数" class="headerlink" title="限制文本显示的行数"></a>限制文本显示的行数</h4><p>默认的情况下， <strong>Text</strong> 会完整的显示我们提供的字符串内容，在一些情况下我们需要限定最多所能显示的行数，可以使用<code>lineLimit</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.lineLimit(<span class="number">2</span>) <span class="comment">// 最多只能显示两行</span></span><br></pre></td></tr></table></figure>

<p>限制文本显示的行数后，多余的文本将会被隐藏，然后以 <strong>…</strong> 的方式结尾。</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://developer.apple.com/documentation/swiftui/text">Text | Apple Developer Documentation</a></p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Text</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 介绍</title>
    <url>/swift-blogs/posts/96cb395e.html</url>
    <content><![CDATA[<h1 id="SwiftUI-简介"><a href="#SwiftUI-简介" class="headerlink" title="SwiftUI 简介"></a>SwiftUI 简介</h1><p>SwiftUI 是 Apple 在 2019 年 WWDC 推出的一种现代化的 UI 开发框架，它是 iOS 13 和 macOS Catalina 的一部分。SwiftUI 可以让用户更容易地创建美观且响应式的用户界面，并且与 Core Data、Realm 等数据存储解决方案集成得非常好。此外，SwiftUI 还在不断更新和完善，以满足开发者的需求。</p>
<h2 id="SwiftUI-的特点"><a href="#SwiftUI-的特点" class="headerlink" title="SwiftUI 的特点"></a>SwiftUI 的特点</h2><h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><p>SwiftUI 采用了声明式编程的方式，与传统的命令式编程相比，这种方式让代码更加简洁易读。你只需要描述应用程序的界面应该如何显示，而不需要详细指定每一个视图的属性和方法。</p>
<span id="more"></span>

<h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>SwiftUI 提供了强大的响应式布局能力，可以轻松地创建出适应不同设备和屏幕尺寸的应用程序。它支持线性布局、网格布局和灵活的布局组合，让你可以轻松地构建出复杂的界面。</p>
<h3 id="内置动画和过渡"><a href="#内置动画和过渡" class="headerlink" title="内置动画和过渡"></a>内置动画和过渡</h3><p>SwiftUI 提供了丰富的内置动画和过渡效果，可以让你轻松地为应用程序添加生动的交互效果。这些动画和过渡效果与硬件加速相结合，可以让你的应用程序看起来更加流畅和自然。</p>
<h3 id="与-Core-Data-和-Realm-集成"><a href="#与-Core-Data-和-Realm-集成" class="headerlink" title="与 Core Data 和 Realm 集成"></a>与 Core Data 和 Realm 集成</h3><p>SwiftUI 可以很容易地与 Core Data 和 Realm 等数据存储解决方案集成。你可以在应用程序中方便地访问和操作数据，而无需手动处理繁琐的数据库操作。</p>
<h2 id="开始使用-SwiftUI"><a href="#开始使用-SwiftUI" class="headerlink" title="开始使用 SwiftUI"></a>开始使用 SwiftUI</h2><p>要开始使用 SwiftUI，你需要先安装 Xcode（macOS 10.15 及更高版本自带），然后创建一个新的 iOS 或 macOS 项目。在项目中，你可以直接使用默认的 <code>ContentView</code> 模板来开始编写 SwiftUI 代码。</p>
<p>下面是一个简单的 SwiftUI 示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, SwiftUI!&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .padding()</span><br><span class="line">            <span class="type">Button</span>(action: &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Button tapped!&quot;</span>)</span><br><span class="line">            &#125;) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Tap me!&quot;</span>)</span><br><span class="line">                    .font(.title)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background(<span class="type">Color</span>.blue)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个示例展示了一个简单的页面，包含一个标题和一个按钮。当用户点击按钮时，控制台会输出 “Button tapped!”。你可以根据自己的需求修改这个示例，或者尝试创建更复杂的界面。</p>
<p>总之，SwiftUI 是一种功能强大、易于使用的 UI 开发框架，它可以帮助你更高效地构建出美观且响应式的应用程序。如果你已经熟悉 Swift 语言，那么学习 SwiftUI 将会是一件非常愉快的事情。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>SwiftUI</tag>
        <tag>Apple</tag>
        <tag>WWDC</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 控件之 ColorPicker</title>
    <url>/swift-blogs/posts/d1bc9d76.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，除了常见的<strong>Picker</strong>和<strong>DatePicker</strong> ，还有一个<strong>ColorPicker（颜色选择器）</strong>，它在我们需要进行颜色选择时非常有用。</p>
<h3 id="创建一个颜色选择器"><a href="#创建一个颜色选择器" class="headerlink" title="创建一个颜色选择器"></a>创建一个颜色选择器</h3><p>首先，使用<code>@State</code>创建一个<code>Color</code>类型的变量作为<code>ColorPicker</code>选中绑定值：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> selectedOptions:<span class="type">Color</span> <span class="operator">=</span> .red</span><br></pre></td></tr></table></figure>

<p>创建<code>ColorPicker</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ColorPicker</span>(selection: <span class="variable">$selectedOptions</span>, label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选择你最喜欢的颜色&quot;</span>)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>

<p>运行项目，点击的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309261444511.png" style="zoom:20%"/>

<span id="more"></span>

<p>默认情况下，<strong>ColorPicker</strong>也支持颜色的透明度选择，如果不想用户选择颜色的透明度，可以将<code>ColorPicker</code>的参数<code>supportsOpacity</code>设置为<code>false</code>即可。如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ColorPicker</span>(selection: <span class="variable">$selectedOptions</span>, supportsOpacity: <span class="literal">false</span>, label: &#123;</span><br><span class="line">               <span class="type">Text</span>(<span class="string">&quot;选择你最喜欢的颜色&quot;</span>)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>

<p>此时的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309261450028.png" style="zoom:20%"/>

<p><strong>ColorPicker</strong>并不支持我们过多的进行自定义，很多场景下，我们使用它的默认样式即可。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>ColorPicker</tag>
        <tag>Picker</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 控件之 DatePicker</title>
    <url>/swift-blogs/posts/b30b2594.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>Picker</strong>可以帮助我们实现一些常见的选择器应用场景。除此之外，SwiftUI 还给我们提供了其他两种常见的选择器，<strong>DatePicker（时间选择器）</strong>和 <strong>ColorPicker （选择器）</strong>。</p>
<h3 id="创建一个-DatePicker"><a href="#创建一个-DatePicker" class="headerlink" title="创建一个 DatePicker"></a>创建一个 DatePicker</h3><p><strong>DatePicker</strong>的创建和<strong>Picker</strong>创建一样，需要使用<code>@State</code>定义一个类型为<code>Date</code>的动态变量，然后将这个动态变量和<code>DatePicker</code>进行绑定：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> selectedOptions:<span class="type">Date</span> <span class="operator">=</span> <span class="type">Date</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>)</span><br></pre></td></tr></table></figure>

<p>默认情况下的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309250930378.png" style="zoom:60%"/>

<span id="more"></span>

<p>默认情况下，我们可以选择日期和时间两种格式。我们也可以通过给<code>DatePicker</code>添加<code>displayedComponents</code>来配置可选项，例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>, displayedComponents: [.date]) <span class="comment">// 只可选择日期</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>, displayedComponents: [.hourAndMinute]) <span class="comment">// 只可选择时间</span></span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>, displayedComponents: [.hourAndMinute, .date]) <span class="comment">// 默认均可选</span></span><br></pre></td></tr></table></figure>



<p>不同样式的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309250936280.png" style="zoom:60%"/>

<h3 id="设置-DatePicker-的不同样式"><a href="#设置-DatePicker-的不同样式" class="headerlink" title="设置 DatePicker 的不同样式"></a>设置 DatePicker 的不同样式</h3><p><strong>DatePicker</strong>的样式可以通过<code>datePickerStyle</code>修饰器来进行设置，它提供了<code>compact</code>、<code>graphical</code>和<code>wheel</code>三种样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>, displayedComponents: [.hourAndMinute, .date]) <span class="comment">// 默认均可选</span></span><br><span class="line">                    .datePickerStyle(.graphical)</span><br></pre></td></tr></table></figure>

<p>不同的样式如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309250948482.png" style="zoom:20%"/>

<h3 id="设置可选择的日期范围"><a href="#设置可选择的日期范围" class="headerlink" title="设置可选择的日期范围"></a>设置可选择的日期范围</h3><p>在一些情况下，我们可能需要将可选择的日期限定在一定的范围内，这只需要我们给<code>DatePicker</code>添加一个<code>in</code>参数即可。<code>in</code>参数要求的是<code>ClosedRange&lt;Date&gt;</code>类型的一个范围区间，</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">Date</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> calendar <span class="operator">=</span> <span class="type">Calendar</span>.current</span><br><span class="line">      <span class="comment">// 开始日期为当前的日期的前三天</span></span><br><span class="line">      <span class="keyword">let</span> start <span class="operator">=</span> calendar.date(byAdding: .day, value: <span class="operator">-</span><span class="number">3</span>, to: .now)<span class="operator">!</span></span><br><span class="line">      <span class="comment">// 结束日期为当前日期的未来三天</span></span><br><span class="line">      <span class="keyword">let</span> end <span class="operator">=</span> calendar.date(byAdding: .day, value: <span class="number">3</span>, to: .now)<span class="operator">!</span></span><br><span class="line">      <span class="keyword">return</span> start<span class="operator">...</span>end <span class="comment">// 返回一个开区间</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$date</span>, in: bounds, displayedComponents: [.date])</span><br><span class="line">               .datePickerStyle(.graphical)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309261529211.png" style="zoom:50%"/>

<h3 id="DatePicker-本地化"><a href="#DatePicker-本地化" class="headerlink" title="DatePicker 本地化"></a>DatePicker 本地化</h3><p>默认情况下，<strong>DatePicker</strong> 以英文的形式进行显示，如果我们需要让它显示为中文，就需要进行<strong>本地化</strong>处理。本地化处理的流程就是给<code>DatePicker</code>添加一个<code>environment</code>修饰器，然后将本地的语言设置为中文即可，具体如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$selectedOptions</span>)</span><br><span class="line">              .datePickerStyle(.graphical)</span><br><span class="line">              .environment(\.locale, <span class="type">Locale</span>.<span class="keyword">init</span>(identifier: <span class="string">&quot;zh&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>本地化前后对比：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309250959187.png" style="zoom: 20%"/>

<p><span style="color:red"><strong>注意：</strong></span>在 <strong>Xcode 15.0 Beta</strong>中，并没有针对星期的显示进行本地化处理，无法确定是 <strong>Xcode 15.0</strong> 本身的问题还是最新的SwiftUI更新后的特性，在之前的的 <strong>Xcode 14.0</strong>中 本地化的处理也会对星期进行本地化，如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309251005729.png" style="zoom:20%"/>  



<p>具体原因待后续观察！</p>
<h3 id="MultiDatePicker（多日期选择器）"><a href="#MultiDatePicker（多日期选择器）" class="headerlink" title="MultiDatePicker（多日期选择器）"></a>MultiDatePicker（多日期选择器）</h3><p>有时间我们可能需要选择多个日期，这是就需要使用到<strong>MultiDatePicker</strong>。与<strong>DatePicker</strong>不同，<code>MultiDatePicker</code>的绑定值为<code>DateComponents</code>的元组<code>Set</code>类型，即：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">MultiDatePicker</span>(<span class="string">&quot;选择日期&quot;</span>, selection: <span class="variable">$dates</span>)</span><br><span class="line">                .frame(height: <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309261509022.png" style="zoom:20%"/>

<p><strong>注意</strong>，<span style="color:red"><strong>MultiDatePciker</strong> 的风格样式只支持<code>graphical</code>样式。不支持其他的风格。</span>需要注意的另外一点就是，在设置<code>MultiDatePicker</code>的可选时间范围时，同样是给它添加一个<code>in</code>参数，但是它需要的是一个<code>Range&lt;Date&gt;</code>类型的日期范围而不是<code>ClosedRange&lt;Date&gt;</code>类型，前者要求的<strong>开区间范围</strong>，而后者要求的是一个<strong>闭区间范围</strong>。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Picker</tag>
        <tag>DatePicker</tag>
        <tag>MultiDatePicker</tag>
        <tag>Range</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 控件之 Image</title>
    <url>/swift-blogs/posts/6b844059.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，我们可以使用<strong>Image</strong>控件来展示一张图片。</p>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><p>在 SwiftUI中，如果我们需要使用<strong>Image</strong>显示一张图片，首先我们需要先将图片资源拖到蓝色的<span style="color:blue"><strong>Assets</strong></span>文件夹中，然后使用图片的文件名加载显示。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309081000150.png"/>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;avatar&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>在最新的<span style="color:red"> <strong>Xcode 15.0</strong></span>中，增加了使用下面的方式加载资源文件夹中的图片的特性：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(.avatar)</span><br></pre></td></tr></table></figure>

<p>上面两种方式的效果是一样的。</p>
<span id="more"></span>

<h3 id="常用的修饰器"><a href="#常用的修饰器" class="headerlink" title="常用的修饰器"></a>常用的修饰器</h3><h4 id="宽高"><a href="#宽高" class="headerlink" title="宽高"></a>宽高</h4><p>设置图片显示的<code>frame</code>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(.avatar)</span><br><span class="line">	.frame(width: <span class="number">100</span>, height: <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>当我们设置<strong>Image</strong>的<code>frame</code>后，我们发现它并没有按照我们所给的宽高进行显示，这是因为我们需要先添加 <code>resizzble</code> 修饰器。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(.avatar)</span><br><span class="line">	.resizable()</span><br><span class="line">	.frame(width: <span class="number">100</span>, height: <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p>但是此时我们可能会发现，我们的图片显示<strong>变形</strong> 了，这主要是因为我们的图片宽高比例和所给的<code>frame</code> 的宽高比例并不一致。我们可以通过设置<code>scaledToFill</code>或者<code>scaledToFit</code> 修饰器来修饰图片的填充样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(.avatar)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .scaledToFit()</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">200</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;scaledToFit&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(.avatar)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .aspectRatio(contentMode: .fill)</span><br><span class="line">                    .scaledToFill()</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">200</span>)</span><br><span class="line">                    .border(.red)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;scaledToFill&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309081112939.png" style="zoom:20%"/>

<p>在预览图中，<span style="color:red"><strong>红色</strong></span> 的边框表示我们实际设置的<code>frame</code> 范围。在同一张图片和同样的<code>frame</code>设置下，我们可以很清楚的看到<code>scaledToFit</code>和<code>scaledToFill</code>的区别：</p>
<ul>
<li><code>scaledToFit</code> 会优先按照给定的<code>frame</code> <strong>宽度（width）</strong>进行填充；</li>
<li><code>scaledToFill</code> 会优先按照给定的<code>frame</code> <strong>高度（height）</strong>进行填充。</li>
</ul>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p>我们可以在通过<code>frame</code>设置宽高的时候来设置图片的对齐方式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.frame(width: <span class="number">100</span>, height: <span class="number">200</span>,alignment: .center)</span><br></pre></td></tr></table></figure>

<p>默认情况下为居中（center）对齐方式.</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309081120845.png"/>

<h4 id="图片裁切"><a href="#图片裁切" class="headerlink" title="图片裁切"></a>图片裁切</h4><p>当图片超出定义的<code>frame</code>范围时，可以使用<code>clipped</code> 修饰器让图片显示的范围和我们定义的<code>frame</code> 一致：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(.avatar)</span><br><span class="line">     .resizable()</span><br><span class="line">     .scaledToFill()</span><br><span class="line">     .frame(width: <span class="number">100</span>, height: <span class="number">200</span>,alignment: .top)</span><br><span class="line">     .border(.red)</span><br><span class="line">     .clipped()</span><br></pre></td></tr></table></figure>



<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309081148253.png" style="zoom:20%"/>

<p>将图片按照形状进行裁切：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.clipShape(<span class="type">Circle</span>())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
        <tag>SwiftUI</tag>
        <tag>Image</tag>
        <tag>SF Symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 控件之 ScrollView(一)</title>
    <url>/swift-blogs/posts/35d3a19e.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>ScrollView</strong> 是一个可滚动的视图。</p>
<h4 id="创建一个-ScrollView"><a href="#创建一个-ScrollView" class="headerlink" title="创建一个 ScrollView"></a>创建一个 ScrollView</h4><p>当我们使用<code>ForEach</code> 循环创建超出一整个屏幕的内容时：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">      <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">          <span class="type">Text</span>(<span class="string">&quot;当前行<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们使用<code>VStack</code>和<code>ForEach</code> 创建了 100 个<code>Text</code>，此时要显示的内容已经超出了一个屏幕所能显示的内容，我们无法看到超出屏幕范围的内容。为了解决这个问题，我们就可以在最外层嵌套一个<code>ScrollView</code>，让整个视图变成滚动显示的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ScrollView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;当前行<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>此时，我们就可以通过上下滚动的方式查看所有的<code>Text</code> 了。</p>
<span id="more"></span>

<h4 id="ScrollView的相关配置"><a href="#ScrollView的相关配置" class="headerlink" title="ScrollView的相关配置"></a>ScrollView的相关配置</h4><h5 id="控制-ScrollView-的滚动位置"><a href="#控制-ScrollView-的滚动位置" class="headerlink" title="控制 ScrollView 的滚动位置"></a>控制 ScrollView 的滚动位置</h5><p>可以通过<code>defaultScrollAnchor</code> 修饰器配置<code>ScrollView</code>的开始滚动的起始位置，它支持以下几个位置：</p>
<ul>
<li><code>top</code> : 从顶部开始滚动；</li>
<li><code>bottom</code> : 从底部开始滚动；</li>
<li><code>center</code>： 从中间位置开始滚动；</li>
<li><code>leading</code>: 从左侧开始滚动；</li>
<li><code>trailing</code>： 从右侧开始滚动；</li>
<li><code>topLeading</code>：从左上开始滚动；</li>
<li><code>topTrailing</code>：从右上开始滚动；</li>
<li><code>bottomLeading</code>：从左下开始滚动；</li>
<li><code>bottomTrailing</code>：从右下开始滚动。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.defaultScrollAnchor(.center)</span><br></pre></td></tr></table></figure>

<h5 id="控制-ScrollView-滚动的方向"><a href="#控制-ScrollView-滚动的方向" class="headerlink" title="控制 ScrollView 滚动的方向"></a>控制 ScrollView 滚动的方向</h5><p><strong>ScrollView</strong> 支持水平<code>horizontal</code>和垂直<code>vertical</code>方向的滚动。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ScrollView</span>(.vertical) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="控制-ScrollView-滚动指示器的显示-隐藏"><a href="#控制-ScrollView-滚动指示器的显示-隐藏" class="headerlink" title="控制 ScrollView 滚动指示器的显示&#x2F;隐藏"></a>控制 ScrollView 滚动指示器的显示&#x2F;隐藏</h5><p><strong>ScrollView</strong> 滚动的时候，视图边缘会有一个滚动的指示器。可以使用<code>scrollIndicators</code> 修饰器来控制它的显示或者隐藏。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.scrollIndicators(.hidden)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>hidden</code>: 表示隐藏；</li>
<li><code>visible</code>: 表示显示；</li>
<li><code>never</code>：和<code>hidden</code> 一致；</li>
</ul>
<p>指定水平或垂直方向上的显示或者隐藏：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.scrollIndicators(.hidden, axes: [.horizontal])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>ScrollView</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI之 VStack、 HStack、 ZStack</title>
    <url>/swift-blogs/posts/e7687e8f.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，我们会经常使用到 <strong>VStack</strong>、<strong>HStack</strong>、<strong>ZStack</strong> 来帮助我们进行布局。</p>
<h4 id="VStack"><a href="#VStack" class="headerlink" title="VStack"></a>VStack</h4><p>在<strong>VStack</strong>中的子视图都将按照<strong>垂直方向</strong>进行排列。</p>
<p>例如：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">        .font(.body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的布局效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309090914844.png"/>

<span id="more"></span>

<h4 id="HStack"><a href="#HStack" class="headerlink" title="HStack"></a>HStack</h4><p>和<strong>VStack</strong> 类似，不过 <strong>HStack</strong>是将子视图按照<strong>水平方向</strong> 进行排列。</p>
<p> 类似地，将上面示例代码中的<strong>VStack</strong> 改为<strong>HStack</strong> :</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">        .font(.body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309090918393.png"/>

<p>对于 <strong>VStack</strong> 和 <strong>HStack</strong> 而言，都可以设置它们子视图之前的间距<code>spacing</code> 和对齐方式<code>alignment</code> 。</p>
<p>区别在于，<strong>VStack</strong> 的对齐方式有：</p>
<ul>
<li><code>center</code>：居中对齐；</li>
<li><code>leading</code> ：左对齐；</li>
<li><code>trailing</code> ： 右对齐。</li>
</ul>
<p><strong>HStack</strong> 的对齐方式有：</p>
<ul>
<li><code>center</code> ：居中对齐；</li>
<li><code>top</code> ：顶部对齐；</li>
<li><code>bottom</code>：底部对齐。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .font(.body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">HStack</span>(alignment: .top, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;globe&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .font(.body)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h4 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h4><p><strong>ZStack</strong> 是让子视图按照<strong>Z轴方向</strong> 堆叠排列。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;avatar&quot;</span>)</span><br><span class="line">            .resizable()</span><br><span class="line">            .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .font(.body)</span><br><span class="line">            .foregroundStyle(.white)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309090942670.png"/>

<p><strong>ZStack</strong> 只能设置对齐方式<code>alignment</code>，它的对齐方式包括：</p>
<ul>
<li><code>top</code>：顶部对齐；</li>
<li><code>bottom</code>：底部对齐；</li>
<li><code>center</code>：居中对齐；</li>
<li><code>leading</code>：左对齐；</li>
<li><code>trailing</code>: 右对齐；</li>
<li><code>topLeading</code>：左上角对齐；</li>
<li><code>topTrailing</code>：右上角对齐；</li>
<li><code>bottomLeading</code>：左下角对齐；</li>
<li><code>bottomTrailing</code>: 右下角对齐。</li>
</ul>
<h4 id="布局示例"><a href="#布局示例" class="headerlink" title="布局示例"></a>布局示例</h4><h5 id="VStack-1"><a href="#VStack-1" class="headerlink" title="VStack"></a>VStack</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">VStackContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 左对齐，上下间距为10</span></span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">...</span><span class="number">10</span>, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;选项<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">                <span class="type">Divider</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.padding(<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="HStack-1"><a href="#HStack-1" class="headerlink" title="HStack"></a>HStack</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HStackContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;朋友圈&quot;</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(alignment: .center, spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(title)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;chevron.right&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ZStack-1"><a href="#ZStack-1" class="headerlink" title="ZStack"></a>ZStack</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ZStackContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// ZStack 实现头像置于背景之上的效果</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;bg&quot;</span>)</span><br><span class="line">                .resizable()</span><br><span class="line">                .scaledToFit()</span><br><span class="line">                .frame(height: <span class="number">300</span>)</span><br><span class="line">            <span class="type">Image</span>(<span class="string">&quot;avatar&quot;</span>)</span><br><span class="line">                .resizable()</span><br><span class="line">                .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                .clipShape(<span class="type">Circle</span>()) <span class="comment">// 圆形头像设置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="VStack、-HStack和-ZStack-一起使用"><a href="#VStack、-HStack和-ZStack-一起使用" class="headerlink" title="VStack、 HStack和 ZStack 一起使用"></a>VStack、 HStack和 ZStack 一起使用</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LayoutDemo</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> options <span class="operator">=</span> [<span class="string">&quot;朋友圈&quot;</span>, <span class="string">&quot;发现&quot;</span>, <span class="string">&quot;游戏&quot;</span>, <span class="string">&quot;更多&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">ZStackContentView</span>()</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(options, id: \.<span class="keyword">self</span>) &#123; title <span class="keyword">in</span></span><br><span class="line">                    <span class="type">HStackContentView</span>(title: title)</span><br><span class="line">                    <span class="type">Divider</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ContentView"><a href="#ContentView" class="headerlink" title="ContentView"></a>ContentView</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> selectedSeg:<span class="type">Int</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> segmentArr <span class="operator">=</span> [<span class="string">&quot;VStack&quot;</span>, <span class="string">&quot;HStack&quot;</span>, <span class="string">&quot;ZStack&quot;</span>, <span class="string">&quot;Layout&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Picker</span>(selection: <span class="variable">$selectedSeg</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span> <span class="operator">..&lt;</span> segmentArr.count) &#123;</span><br><span class="line">                    <span class="type">Text</span>(segmentArr[<span class="variable">$0</span>]).tag(<span class="variable">$0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            .pickerStyle(.segmented) <span class="comment">//设置选择器的样式</span></span><br><span class="line">            <span class="comment">// 根据选择器绑定值的变化不同，显示不同的布局视图</span></span><br><span class="line">            <span class="keyword">switch</span> selectedSeg &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="type">VStackContentView</span>()</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="type">HStackContentView</span>()</span><br><span class="line">                <span class="type">Divider</span>()</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="type">ZStackContentView</span>()</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="type">LayoutDemo</span>()</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<video type="video/mp4"  width="30%" height="50%" src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309090955427.mp4" controls="controls"/>

]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>VStack</tag>
        <tag>HStack</tag>
        <tag>ZStack</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI之形状绘制</title>
    <url>/swift-blogs/posts/69def74.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，可以使用内置的形状或者根据路径自定义形状。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202308261003030.png" style="zoom:20%;" />

<h3 id="SwiftUI-中内置的形状"><a href="#SwiftUI-中内置的形状" class="headerlink" title="SwiftUI 中内置的形状"></a>SwiftUI 中内置的形状</h3><p>SwiftUI 中给我们提供了五种常用内置形状：矩形，圆角矩形，圆形，椭圆形和胶囊形状。</p>
<span id="more"></span>

<h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><p>在 SwiftUI 中使用<span style="color:red"> <strong><code>Rectangle</code></strong></span> 类创建一个矩形。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Rectangle</span>()</span><br><span class="line">      .fill(.gray) <span class="comment">// 矩形填充的颜色</span></span><br><span class="line">      .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h4 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h4><p>在 SwiftUI 中使用<span style="color:red"> <strong><code>RoundedRectangle</code></strong></span> 类创建一个圆角矩形，不过它的初始化方法给我们提供了两个属性， <code>cornerSize</code> 和 <code>cornerRadius</code> 。通过配置这两个属性我们都可以创建一个圆角矩形。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过圆角尺寸创建圆角矩形</span></span><br><span class="line"><span class="type">RoundedRectangle</span>(cornerSize: <span class="type">CGSize</span>(width: <span class="number">8</span>, height: <span class="number">8</span>))</span><br><span class="line">          .fill(.red)</span><br><span class="line">          .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过圆角半径创建圆角矩形</span></span><br><span class="line"><span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>)</span><br><span class="line">           .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>以上两中方式创建出来的圆角矩形形状是一样的。</p>
<h4 id="胶囊形"><a href="#胶囊形" class="headerlink" title="胶囊形"></a>胶囊形</h4><p>创建一个胶囊形状使用 <span style="color:red"> <strong><code>Capsule</code></strong> </span>类。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Capsule</span>()</span><br><span class="line">    .fill(.orange)</span><br><span class="line">    .frame(width: <span class="number">100</span>, height: <span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<p>这里需要注意的一点是，当我们不添加 <code>frame</code> 修饰器时，默认情况下为一个圆形。胶囊的最终形状根据给<code>frame</code> 修饰器的<code>width</code>和<code>height</code> 两个属性决定。</p>
<h4 id="椭圆形"><a href="#椭圆形" class="headerlink" title="椭圆形"></a>椭圆形</h4><p>创建一个椭圆形状使用 <span style="color:red"> <strong><code>Ellipse</code></strong> </span>类。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Ellipse</span>()</span><br><span class="line">     .frame(width: <span class="number">100</span>, height: <span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<p>同样地，当 <code>frame</code> 修饰器中的<code>width</code> 和 <code>height</code> 两个属性值一样时，椭圆形状会变成一个圆形。</p>
<h4 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h4><p>创建一个圆形状使用 <span style="color:red"> <strong><code>Circle</code></strong> </span>类。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">      .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://developer.apple.com/documentation/swiftui/shapes">Shapes | Apple Developer Documentation</a></p>
]]></content>
      <categories>
        <category>SwiftUI 进阶</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>形状</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI之绘制自定义形状</title>
    <url>/swift-blogs/posts/8c78197a.html</url>
    <content><![CDATA[<p>在之前一片文章中，我们介绍了 SwiftUI 中内置的一些图形形状。在一些特殊的工能需求下，我们需要自定义去绘制一些形状，例如五角星⭐️，多边形。</p>
<h3 id="自定义路径"><a href="#自定义路径" class="headerlink" title="自定义路径"></a>自定义路径</h3><p>在 SwiftUI 中可以使用 <span style="color:red"><code>Shape</code></span>协议自定义路径。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义一个结构体，实现 Shape 协议</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DrawRectangleShape</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        path.addRect(rect)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们自定义了一个实现 <code>Shape</code> 协议的结构体类型，在这个自定义的结构体中我们需要实现一个 <code>path(in:)</code>的协议方法，这个方法要求我们返回一个 <code>Path</code>对象，即我们要绘制的形状路径。</p>
 <span id="more"></span>

<p>在上面的这个例子中，我们直接将传进来的 <code>rect</code> 添加到绘制的路径中。具体表现为下面的代码绘制的是一个红色矩形：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DrawRectangleShape</span>()</span><br><span class="line">            .fill(.red)</span><br><span class="line">            .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>以及下面的代码绘制结果看起来像是一根红色的线，因为绘制的图像的形状高度为 1。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">DrawRectangleShape</span>()</span><br><span class="line">            .fill(.red)</span><br><span class="line">            .frame(width: <span class="number">200</span>, height: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SwiftUI 进阶</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>自定义形状</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift 介绍</title>
    <url>/swift-blogs/posts/ea0a67e1.html</url>
    <content><![CDATA[<h1 id="Swift-编程语言介绍"><a href="#Swift-编程语言介绍" class="headerlink" title="Swift 编程语言介绍"></a>Swift 编程语言介绍</h1><p>Swift 是一种强大且直观的编程语言，由 Apple Inc. 开发，用于 iOS, macOS, watchOS 和 tvOS 的应用开发。Swift 结合了 C 和 Objective-C 的优点，并且支持函数式编程，面向对象编程和泛型编程。它的目标是提供一种安全、高效、灵活和现代化的编程语言，可以让开发者创造出更快、更稳定、更易用的应用程序。</p>
<span id="more"></span>

<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>Swift 强调类型安全和内存管理。它不允许隐式转换到不安全的类型，这可以防止许多常见的编程错误。此外，Swift 使用自动引用计数（ARC）来管理内存，减少了内存泄露的可能性。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>Swift 旨在提供高性能的应用程序。它的编译器进行了优化，以提高运行速度和减少能源消耗。Swift 的语法糖也有助于编写简洁且高效的代码。</p>
<h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><p>Swift 的语法清晰简洁，易于学习和使用。它的设计哲学是“简单就是美”，使得 Swift 代码既美观又易读。</p>
<h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>Swift 是开源的，这意味着开发者可以查看和修改其源代码。这使得 Swift 成为一个活跃的社区项目，不断有新的功能和改进加入其中。</p>
<h2 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h2><h3 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h3><p>Swift 是一种静态类型语言，这意味着你在编写代码时必须为每个变量明确指定类型。这可以避免许多类型错误，并使得代码更加易于理解和维护。</p>
<h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><p>Swift 完全支持面向对象编程，包括类、结构体、协议、继承和多态等概念。它也支持协议扩展，这使得你可以向现有类添加新的方法或者属性，而无需改变原有的代码。</p>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>Swift 同时支持函数式编程和面向对象编程。你可以在函数中使用闭包，这为处理异步事件或者创建高阶函数提供了强大的工具。</p>
<h3 id="Playgrounds"><a href="#Playgrounds" class="headerlink" title="Playgrounds"></a>Playgrounds</h3><p>Xcode 集成了一个强大的交互式编程环境——Playgrounds。你可以在 Playgrounds 中尝试 Swift 的各种特性，而无需创建完整的项目。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Swift 是一种强大、直观且安全的编程语言，它专注于提供最好的用户体验和性能。无论你是初学者还是有经验的开发者，Swift 都能帮助你更有效地编写代码。</p>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Apple</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI实践之创建一个待办清单（二）</title>
    <url>/swift-blogs/posts/6b5357a8.html</url>
    <content><![CDATA[<h1 id="首页界面开发与点击交互"><a href="#首页界面开发与点击交互" class="headerlink" title="首页界面开发与点击交互"></a>首页界面开发与点击交互</h1><p>项目创建和基础配置介绍完成后，接着我们来完成待办清单的首页开发。</p>
<h2 id="创建文件和文件夹"><a href="#创建文件和文件夹" class="headerlink" title="创建文件和文件夹"></a>创建文件和文件夹</h2><p>在Xcode左侧项目导航栏中，选择二级目录下的项目名，鼠标右键点击 <strong>New Group</strong> 创建一个名为 <strong>View</strong> 的文件夹：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051422276.png" style="zoom:70%"/>

<p>创建后的项目结构如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051423576.png"/>

<p>这个文件夹将来存储我们之后创建的所有视图代码文件。</p>
<span id="more"></span>

<p>在我们新建的 <strong>View</strong> 文件夹下新建一个名为 <strong>HomeView</strong> 的 SwiftUI文件：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051423667.png" style="zoom:70%"/>

<p>此时的项目结构如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051423797.png"/>

<h2 id="创建导航栏"><a href="#创建导航栏" class="headerlink" title="创建导航栏"></a>创建导航栏</h2><p>对初始文件 <code>ContentView.swift</code> 进行修改，修改后的代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">HomeView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NavigationView</code> 是一个导航视图控件，用来配置导航栏文字和按钮。</p>
<p>在 <code>HomeView.swift</code> 文件中开始编写如下代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一个ZStack布局</span></span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span> 待创建内容</span></span><br><span class="line">        &#125;</span><br><span class="line">        .navigationTitle(<span class="string">&quot;待办清单&quot;</span>) <span class="comment">// 导航栏标题</span></span><br><span class="line">        .navigationBarItems(</span><br><span class="line">            <span class="comment">// 导航栏左侧按钮</span></span><br><span class="line">            leading: <span class="type">EditButton</span>(),</span><br><span class="line">            <span class="comment">// 导航栏右侧按钮</span></span><br><span class="line">            trailing: <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;plus&quot;</span>)</span><br><span class="line">                    .foregroundColor(.blue) <span class="comment">// 图标颜色</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;添加&quot;</span>)</span><br><span class="line">                    .font(.subheadline) <span class="comment">// 字体大小</span></span><br><span class="line">                    .foregroundColor(.blue) <span class="comment">// 字体颜色</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ZStack</code> : Z轴层叠布局；</li>
<li><code>VStack</code> : 垂直布局；</li>
<li><code>HStack</code> : 水平布局；</li>
<li><code>Image</code> : 显示图片控件，经常和 Apple 提供的 <strong>SF Symbols</strong> 配合使用；</li>
<li><code>EditButton</code> : 编辑按钮；</li>
</ul>
<p><strong>此时，预览效果如下</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051424443.png" style="zoom:60%"/>

<blockquote>
<p>SF Symbols 介绍和下载地址：<a href="https://developer.apple.com/sf-symbols/">SF Symbols - Apple Developer</a></p>
</blockquote>
<h2 id="创建待办列表"><a href="#创建待办列表" class="headerlink" title="创建待办列表"></a>创建待办列表</h2><p>在 <code>ZStack</code> 的内容部分 <code>// TODO: 待创建内容</code> 注释后面使用 <code>List</code>  创建一个待办列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark.circle&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Swift学习&quot;</span>)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                .font(.title2)</span><br><span class="line">                .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line">                </span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark.circle&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;健身&quot;</span>)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                .font(.title2)</span><br><span class="line">                .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark.circle&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;阅读&quot;</span>)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                .font(.title2)</span><br><span class="line">                .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark.circle&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;聚餐&quot;</span>)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                &#125;</span><br><span class="line">                .font(.title2)</span><br><span class="line">                .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>此时，预览效果如下</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051426713.png" style="zoom:60%"/>

<p>在上面的代码中，我们使用复制粘贴的方式使用了大量冗余的代码，接着我们通过自定义视图的方式实现视图的复用，从而减少冗余代码的使用。</p>
<p>在 <strong>View</strong> 文件夹下新建一个名为 <code>TodoItemView.swift</code> 的文件，在文件中添加编写下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TodoItemView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> todo:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Swift学习&quot;</span> <span class="comment">// 待办事项</span></span><br><span class="line">    <span class="keyword">var</span>  isChecked: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span> <span class="comment">// 是否已完成</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: isChecked <span class="operator">?</span>  <span class="string">&quot;checkmark.circle&quot;</span> : <span class="string">&quot;circle&quot;</span>) <span class="comment">// 根据是否完成显示不同的图标</span></span><br><span class="line">            <span class="type">Text</span>(todo)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .font(.title2)</span><br><span class="line">        .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此时，<code>TodoItemView</code>的预览效果如下</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051428146.png" style="zoom: 60%"/>

<p>回到 <code>HomeView.swift</code> 视图页面，重新编辑 <code>List</code> 的内容：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">     <span class="type">TodoItemView</span>() <span class="comment">// 使用默认值</span></span><br><span class="line">     <span class="type">TodoItemView</span>(todo: <span class="string">&quot;健身&quot;</span>, isChecked: <span class="literal">true</span>) <span class="comment">// 通过传值的方式自定义显示内容和状态</span></span><br><span class="line">     <span class="type">TodoItemView</span>(todo: <span class="string">&quot;健身&quot;</span>, isChecked: <span class="literal">true</span>) <span class="comment">// 通过传值的方式自定义显示内容和状态</span></span><br><span class="line">     <span class="type">TodoItemView</span>(todo: <span class="string">&quot;阅读&quot;</span>, isChecked: <span class="literal">true</span>) <span class="comment">// 通过传值的方式自定义显示内容和状态</span></span><br><span class="line">     <span class="type">TodoItemView</span>(todo: <span class="string">&quot;聚餐&quot;</span>, isChecked: <span class="literal">true</span>) <span class="comment">// 通过传值的方式自定义显示内容和状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>此时，预览效果如下</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051428398.png" style="zoom:60%"/>

<p>可以发现和之前效果是一样的，但是我们的代码变得更加简洁了。实际上，我们还可以使用数组和 <code>ForEach</code> 来进一步让我们的代码更加简洁。</p>
<p>在 <code>body</code> 上面定义一个字符串类型的数组：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> todos: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;SwiftUI 学习&quot;</span>, <span class="string">&quot;健身&quot;</span>, <span class="string">&quot;阅读&quot;</span>, <span class="string">&quot;聚餐&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>使用 <code>ForEach</code> 循环数据创建列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">       <span class="type">ForEach</span>(todos, id: \.<span class="keyword">self</span>) &#123; todo <span class="keyword">in</span></span><br><span class="line">            <span class="type">TodoItemView</span>(todo: todo)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里为止，我们只是简单的创建了一个字符串类型的数组，但是我们会发现所有的代码都是同一个状态，所以接下来我们需要创建一个数据模型来定义待办事项。</p>
<p>新建一个名为 <code>Model</code> 的文件夹，在这个文件夹先新一个名为 <code>Todo.swift</code> 的 Swift 文件，<span style="color:red"><strong>注意</strong></span>这里不是SwiftUI文件。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051429117.png"  style="zoom:30%"/>

<p><strong>此时的文件结构如下</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051430250.png" style="zoom:70%"/>

<p>在 <code>Todo.swift</code> 文件中定义一个结构体类型数据模型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Todo</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span> <span class="comment">// 唯一ID，ForEach 的时候需要用到</span></span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span>  <span class="comment">// 待办事项</span></span><br><span class="line">    <span class="keyword">let</span> isChecked: <span class="type">Bool</span> <span class="comment">// 待办状态</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化方法</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">String</span> <span class="operator">=</span> <span class="type">UUID</span>().uuidString, <span class="params">title</span>: <span class="type">String</span>, <span class="params">isChecked</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> title</span><br><span class="line">        <span class="keyword">self</span>.isChecked <span class="operator">=</span> isChecked</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，将我们之前字符串数组进行修改：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> todos: [<span class="type">Todo</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;SwiftUI学习&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;健身&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;阅读&quot;</span>, isChecked: <span class="literal">true</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;聚餐&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>修改 <code>List</code> 部分的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">       <span class="type">ForEach</span>(todos) &#123; todo <span class="keyword">in</span></span><br><span class="line">          <span class="type">TodoItemView</span>(todo: todo.title, isChecked: todo.isChecked)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们发现，我们在使用 <code>ForEach</code> 循环的时候，不再需要传递 <code>id</code> 参数，这是因为我们在定义模型的时候让 <code>Todo</code> 继承了 <code>Identifiable</code> 协议，并且声明了一个 <code>id</code> 成员，同时初始化的时候使用方法 <code>UUID().uuidString</code> 让每个元素都自动生成了一个独一无二的ID。</p>
<h2 id="数据响应与交互"><a href="#数据响应与交互" class="headerlink" title="数据响应与交互"></a>数据响应与交互</h2><p>接下来，我们要实现点击选中和编辑功能。</p>
<p>在SwiftUI中，响应式的数据交互是它的另外一个主要特点。接下来我们使用通过继承 <code>ObservableObject</code> 协议来创建一个响应式的数据模型。</p>
<p>在 <strong>Model</strong>  文件夹下新建一个名为 <code>ListViewModel.swift</code> 的文件，在这个文件中编辑下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI <span class="comment">// 由于我们定义的是一个响应式的数据，所以这里需要引入SwiftUI框架</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> todos:[<span class="type">Todo</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;SwiftUI学习&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;健身&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;阅读&quot;</span>, isChecked: <span class="literal">true</span>),</span><br><span class="line">        <span class="type">Todo</span>(title: <span class="string">&quot;聚餐&quot;</span>, isChecked: <span class="literal">false</span>),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在定义一个响应式数据对象时，我们定义的是一个类即关键字使用的是 <code>class</code> ， 然后自定义的这个类需要继承自 <code>ObservableObject</code> 协议。对于类中的成员变量，如果需要进行响应式交互，我们需要使用关键字 <code>@Published</code> 进行修饰。</p>
<p>接着做以下的几处修改：</p>
<p>1、<code>TodoItemView.swift</code> 文件中：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TodoItemView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> todo: <span class="type">Todo</span>  <span class="comment">// 修改1</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">						<span class="comment">// 修改2</span></span><br><span class="line">            <span class="type">Image</span>(systemName: todo.isChecked <span class="operator">?</span>  <span class="string">&quot;checkmark.circle&quot;</span> : <span class="string">&quot;circle&quot;</span>) <span class="comment">// 根据是否完成显示不同的图标</span></span><br><span class="line">            <span class="type">Text</span>(todo.title)</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .font(.title2)</span><br><span class="line">        .padding(<span class="number">12</span>) <span class="comment">// 内边距</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对预览文件进行修改，如果不需要预览也可以直接删除：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TodoItemView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TodoItemView</span>(todo: .<span class="keyword">init</span>(title: <span class="string">&quot;健身&quot;</span>, isChecked: <span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、 <code>HomeView.swift</code> 文件中：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HomeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> listModel: <span class="type">ListViewModel</span> <span class="operator">=</span> <span class="type">ListViewModel</span>()  <span class="comment">// 修改1</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一个ZStack布局</span></span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">							<span class="comment">// 修改2</span></span><br><span class="line">                <span class="type">ForEach</span>(listModel.todos) &#123; todo <span class="keyword">in</span></span><br><span class="line">                    <span class="type">TodoItemView</span>(todo: todo)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationTitle(<span class="string">&quot;待办清单&quot;</span>) <span class="comment">// 导航栏标题</span></span><br><span class="line">        .navigationBarItems(</span><br><span class="line">            <span class="comment">// 导航栏左侧按钮</span></span><br><span class="line">            leading: <span class="type">EditButton</span>(),</span><br><span class="line">            <span class="comment">// 导航栏右侧按钮</span></span><br><span class="line">            trailing: <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;plus&quot;</span>)</span><br><span class="line">                    .foregroundColor(.blue) <span class="comment">// 图标颜色</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;添加&quot;</span>)</span><br><span class="line">                    .font(.subheadline) <span class="comment">// 字体大小</span></span><br><span class="line">                    .foregroundColor(.blue) <span class="comment">// 字体颜色</span></span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的预览或者运行效果和之前的一样。</p>
<p>接下来，我们需要给空间添加交互，例如点击或者滑动。</p>
<p>在 <code>ListViewMode.swift</code> 文件中添加一个状态更新函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新完成状态</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateTodoStatus</span>(<span class="params">todo</span>: <span class="type">Todo</span>) &#123;</span><br><span class="line">        <span class="comment">// 查询ID相同的第一个元素索引，可能为空，所以使用 if-let 进行解析</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> index <span class="operator">=</span> todos.firstIndex(where: &#123;<span class="variable">$0</span>.id <span class="operator">==</span> todo.id&#125;) &#123;</span><br><span class="line">            todos[index].isChecked <span class="operator">=</span> <span class="operator">!</span>todos[index].isChecked <span class="comment">// 完成状态取反</span></span><br><span class="line">            <span class="built_in">print</span>(todo)</span><br><span class="line">            <span class="built_in">print</span>(todos)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>给 <code>TodoItemView</code> 添加一个 <code>onTapGesture</code> 点击手势交互修饰器，在里面实现点击后状态更新的逻辑：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">ForEach</span>(listModel.todos) &#123;  todo <span class="keyword">in</span></span><br><span class="line">    <span class="type">TodoItemView</span>(todo: todo).onTapGesture &#123;</span><br><span class="line">           listModel.updateTodoStatus(todo: todo)</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>将项目运行在模拟器上或者在预览视图中直接运行，我们会发现点击后控价并没有发生任何的变化。</p>
<p>这是因为我们在声明一个继承自 <code>ObservableObject</code> 协议的类对象时，需要使用<code>@ObservedObject</code> 关键字进行修饰，即修改下面的代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ObservedObject</span> <span class="keyword">var</span> listModel: <span class="type">ListViewModel</span> <span class="operator">=</span> <span class="type">ListViewModel</span>()</span><br></pre></td></tr></table></figure>

<p><strong>此时，再运行我们的项目，点击任意一个待办事项，效果如下</strong>：</p>
<video type="video/mp4"  width="30%" height="50%" src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051431958.mp4" controls="controls"/>

]]></content>
      <categories>
        <category>使用SwiftUI创建一个待办清单</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>待办清单</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI实践之创建一个待办清单（一）</title>
    <url>/swift-blogs/posts/5b45bb70.html</url>
    <content><![CDATA[<h1 id="项目创建和基础配置说明"><a href="#项目创建和基础配置说明" class="headerlink" title="项目创建和基础配置说明"></a>项目创建和基础配置说明</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>1、打开Xcode</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051352356.png" style="zoom:30%"/>

<p>Xcode的初始界面存在三种不同的项目创建方式：</p>
<p><strong>Create a new Xcode project</strong>: 创建一个全新的工程项目，最常用的项目创建方式；</p>
<p><strong>Cone an existing project</strong>: 克隆一个项目，适用于已经存在并且使用Git或SVN版本管理工具管理的项目；</p>
<p><strong>Open a project or file</strong>： 打开一个本机已经存在的项目或文件。</p>
<span id="more"></span>

<p>2、选择第一个，创建一个全新的Xcode项目：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051354165.png" style="zoom:15%"/>

<p>首先需要注意是，我们可以创建不同平台的应用项目，例如<span style="color:red"> iOS、macOS、watchOS、tvOS</span> 或者是同时运行多个平台的项目。</p>
<p>这里我们选择 <strong>iOS</strong>，因为我们的应用只需要运行在iPhone或者iPad上。</p>
<p>针对我们常见的APP开发，我们有两个选项，分别是 <strong>App</strong> 和 <strong>App Playground。</strong> 二者的区别在于：</p>
<ul>
<li><strong>App</strong> 选项创建的项目是一个工程文件，包含多个文件； <strong>App Playground</strong> 选项创建的项目是一个扩展名为 <code>.swiftpm</code> 的文件；</li>
<li><strong>App</strong> 选项创建的项目<strong>只能</strong>通过Mac电脑上的Xcode编译运行和二次开发；<strong>App Playground</strong> 选项创建的项目可以使用Xcode、iPad或者Mac上的 <strong>Swift Playgrounds</strong> 应用程序运行和二次开发。</li>
<li><strong>App</strong> 选项创建的项目项目更加灵活，适用于大型项目或者多人协同开发；<strong>App Playground</strong> 选项创建的项目适用于个人或者小型软件开发；</li>
</ul>
<p>细心的同学可能已经注意都一点，<strong>App Playground</strong> 选项创建的项目和在iPad上使用<strong>Swift Playgrounds</strong>创建的项目是一样的。</p>
<blockquote>
<p>其他的一些项目创建选项主要用于一些特殊的应用开发，例如开发游戏、开发一个AR的应用以及开发软件包等。赶兴趣的同学可以自行了解。</p>
</blockquote>
<p>选择 <strong>App</strong> 选项，点击 <strong>Next</strong>：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051356228.png" style="zoom:30%"/>

<p>项目的配置信息：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051357254.png" style="zoom:50%"/>

<p><strong>Product Name</strong>: 项目名称或者工程名称；</p>
<p><strong>Team</strong>:  开发团队名称，即开发者的Apple ID；</p>
<p><strong>Organization Identifier</strong>: 组织ID，一般为公司域名倒过来。例如正式域名为 <a href="http://www.qingmaoedu.com/">www.qingmaoedu.com</a> 倒过来就是 <code>com.qingmaoedu.www </code>；</p>
<p><strong>Bundle Identifier</strong>: Xcode 使用组织名+项目名自动为应用生成的一个标识ID，这个ID在进行应用上架时会非常关键，也可以后续在Xcode中自行修改。需要注意的一点是，这个ID在App Store 中相当于应用的身份证号，且是唯一存在的；</p>
<p><strong>Interface</strong>: 应用开发要使用的技术框架，存在两个选项 <strong>SwiftUI</strong> 和 <strong>Storyboard，</strong>前者使用SwiftUI 作为主要的技术框架，后者使用UIKit作为主要的技术框架。当然这二者在后续的项目中可以混合使用。UIKit 是SwiftUI推出之前，开发iOS应用的唯一开发框架，用来实现界面的构建；</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051359529.png" style="zoom:100%"/>

<p><strong>Language</strong> : 开发语言，有 <strong>Swift</strong> 和 <strong>Objective-C</strong> 两种开发语言；</p>
<p><strong>Use Core Data</strong> : 项目是否使用 Core Data 框架；Core Data 是Apple提供的数据存储框架，可以实现本地存储和云存储；</p>
<p><strong>Include Tests</strong> : 是否包含测试到项目中，项目开发完成后进行功能和UI测试的时候会用到来编写测试用例。</p>
<p>最终项目配置如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051401234.png" style="zoom:70%"/>

<p>点击 <strong>Next</strong> 选择一个项目文件的存储位置，</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051401477.png" style="zoom:40%"/>

<p><span style="color:red"><strong>注意</strong></span>，这里有一个是否使用 Git 来对项目做一个版本管理的选项，如果我们熟悉Git和GitHub的使用或者这个项目需要多个人共同开发可以进行勾选。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051403037.png"/>



<h2 id="项目结构介绍和基础配置"><a href="#项目结构介绍和基础配置" class="headerlink" title="项目结构介绍和基础配置"></a>项目结构介绍和基础配置</h2><p>1、项目结构</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051403741.png"/>

<p>项目创建后，默认下的两个 Swift文件和我们之前使用 <strong>Swift Playgrounds</strong> 创建的一致。我们需要注意的是一个蓝色资源文件夹 <strong>Assets</strong> ，这个文件用存放我们项目中所有的素材 资源，例如图片、音视频、颜色数值等。</p>
<p>2、基础配置</p>
<p>选中项目的根目录，在 <strong>TARGETS→General</strong> 中可以找到项目的一些通用的基础配置：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051403718.png" style="zoom:30%"/>

<p>在这个基础配置页面，我们比较常用的配置包括：</p>
<p><strong>Supported Destinations</strong> : 项目支持的硬件平台。我们可以在这里使用应用支持运行的平台，例如iPhone、iPad、Mac 或者Apple TV。</p>
<p><strong>Minimum Deployments</strong> : 项目最低支持的运行系统版本。例如这里显示的iOS 16.4 意味着如果我们不进行修改，那么我们开发完成的项目将无法在低于 iOS 16.4 的系统上运行。</p>
<p><strong>Identify</strong> ： 应用的标识。</p>
<ul>
<li><p><strong>App Category</strong> : 使用SwiftUI创建的项目可以在这里设置一个应用的默认图标；</p>
</li>
<li><p><strong>Display Name</strong> : 应用展示在桌面的名称，例如我们手机上常见的“淘宝”、“抖音”、“支付宝”等等，如果不进行设置默认为我们创建时设置的项目包名；</p>
</li>
<li><p><strong>Bundle Identifier</strong> : 应用的标识ID，默认自动生成，我们也可以进行修改，需要注意的是应用上架审核时这个ID必须是唯一存在的；</p>
</li>
<li><p><strong>Version</strong> : 应用版本号；</p>
</li>
<li><p><strong>Build</strong>: 应用编译版本号。</p>
<p>版本号和编译版本后在应用上架审核时用的比较多，平时基本不需要进行修改。</p>
</li>
</ul>
<p><strong>Deployment Info</strong>: 配置应用在设备上运行时可以支持的设备方向和状态栏默认的样式。</p>
<p>关于设备的方向：</p>
<ul>
<li><strong>Portrait :</strong>  设备与地面垂直，Home 键位于底部或者面容识别位于顶部；</li>
<li><strong>Upside Down</strong> ：设备与地面垂直，Home 键位于顶部或者面容识别位于底部；</li>
<li><strong>Landscape Left ：</strong>设备的面容识别位于右侧或者Home 键位于左侧；</li>
<li><strong>Landscape Right ：</strong>设备的面容识别位于左侧或者Home 键位于右侧；</li>
</ul>
<blockquote>
<p>API开发文档：<a href="https://developer.apple.com/documentation/uikit/uideviceorientation">UIDeviceOrientation | Apple Developer Documentation</a></p>
</blockquote>
<p>打开 <code>ContentView.swift</code> 文件，同时打开预览界面，点击预览界面从左往右数的第三个选项按钮，然后打开 <strong>Orientation</strong> 的选项开即可调整预览界面中设备的不同方向。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051404012.png" style="zoom:40%"/>



<p>在刚刚的<strong>Deployment Info</strong> 配置中，除了可以设置应用运行后的方向，也可以设置应用中顶部状态栏的样式:</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051405925.png"/>

<ul>
<li><strong>Default</strong> ：默认样式，根据页面的样式进行选择；</li>
<li><strong>Dark Content</strong> : 状态栏背景为白色，文字和图标为黑色，即白底黑字；</li>
<li><strong>Light Content</strong> :  状态栏背景为黑色，文字和图标为白色，即黑底白字；</li>
</ul>
<h2 id="配置项目和演示"><a href="#配置项目和演示" class="headerlink" title="配置项目和演示"></a>配置项目和演示</h2><p>在 <strong>Xcode</strong>的顶部选择一个我们指定运行的模拟器：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051406328.png" style="zoom:40%"/>

<p>如果没有想要的模拟器，可以点击底部的 <strong>Manage Run Destinations</strong> 选项去添加不同系统版本和型号的模拟器：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051406713.png" style="zoom:30%"/>

<p>在后面的课程中，我们也将使用WiFi或者数据线的方式将应用运行在我们的手机上，即真机测试。</p>
<p>选中模拟器后，点击底部类似于播放▶️的按钮运行我们的项目，习惯使用快捷键的同学也可以使用 <strong><code>Commond + R</code></strong> 快捷键运行项目<strong>。</strong></p>
<p>不修改任何配置的情况下，运行的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051407884.png" style="zoom:50%"/>

<p>点击模拟器顶部的 <strong>Home</strong> 键回到桌面，我们可以看到应用使用了一个默认的白色线框图标以及应用的名称为我们的项目名称。 </p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309051407389.png"/>

<p>需要注意的一点是，当我们通过上面介绍的这些设置去配置项目时，会发现存在以下的一些问题：</p>
<ul>
<li>设置 <strong>App Category</strong> 和 <strong>Status Bar Style</strong> 都没有出现我们预期的效果。但是我们可以使用其他的方式去设置这个选项，例如在资源文件中添加我们自己的应用图标到 <strong>AppIcon</strong> 里面可以设置应用的图标，后续我们可以使用代码的方式去设置状态栏的样式。</li>
<li>当我们只给应用设置一个方向时，无论后续如何旋转我们的设备，界面布局都不会发生变化。即我们可以通过指定应用只能竖屏或者横屏的模式下运行，这样一来我们在开发的使用就不需要考虑不同屏幕方向下的界面布局了。</li>
</ul>
]]></content>
      <categories>
        <category>使用SwiftUI创建一个待办清单</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>待办清单</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 Label</title>
    <url>/swift-blogs/posts/8bd109ea.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>Label</strong> 用来展示一个文本和图标（icon）。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用<strong>Assets</strong> 中的图片作为<strong>Label</strong> 的图标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Label(&quot;avatar&quot;, image: &quot;avatar&quot;)</span><br></pre></td></tr></table></figure>

<p>使用<strong>SF Symbols</strong> 中的图标作为<strong>Label</strong> 的图标：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Label</span>(<span class="string">&quot;apple&quot;</span>, systemImage: <span class="string">&quot;apple.logo&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="设置不同的Label样式"><a href="#设置不同的Label样式" class="headerlink" title="设置不同的Label样式"></a>设置不同的<strong>Label</strong>样式</h4><p>可以使用<code>labelStyle</code> 修饰器来定义 Label 的样式：</p>
<ul>
<li><code>iconOnly</code> : 只显示图标；</li>
<li><code>titleAndIcon</code>: 显示文字和图标，默认样式；</li>
<li><code>titleOnly</code> ： 只显示文字；</li>
<li><code>automatic</code>：自动。</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Label</span>(<span class="string">&quot;apple&quot;</span>, systemImage: <span class="string">&quot;apple.logo&quot;</span>)</span><br><span class="line">   .labelStyle(.automatic)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="使用一个-View作为-Label-的图标"><a href="#使用一个-View作为-Label-的图标" class="headerlink" title="使用一个 View作为 Label 的图标"></a>使用一个 View作为 Label 的图标</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Label</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Felix&quot;</span>)</span><br><span class="line">        .font(.body)</span><br><span class="line">        .foregroundStyle(.primary)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Zhao&quot;</span>)</span><br><span class="line">        .font(.subheadline)</span><br><span class="line">        .foregroundStyle(.secondary)</span><br><span class="line">    </span><br><span class="line">&#125; icon: &#123;</span><br><span class="line">    <span class="type">Circle</span>()</span><br><span class="line">        .fill(.red)</span><br><span class="line">        .frame(width: <span class="number">44</span>, height: <span class="number">44</span>)</span><br><span class="line">        .overlay(<span class="type">Text</span>(<span class="string">&quot;F&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的Label 中，我们使用两个不同样式的<code>Text</code> 作为<strong>Label</strong> 要显示的文字内容；使用一个<code>Circle</code> 作为<strong>Label</strong>的自定义图标视图。</p>
<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309131405868.png"/>

]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Label</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 Button</title>
    <url>/swift-blogs/posts/d48dbb48.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>Button</strong> 是一个视图，它可以响应触摸点击事件。Button 视图有一个基本的结构，包括<strong>标题（label）</strong>和<strong>动作（action）</strong>。动作是一个在按钮被点击时触发的函数。</p>
<h3 id="按钮的定义"><a href="#按钮的定义" class="headerlink" title="按钮的定义"></a>按钮的定义</h3><p>下面是一个简单的 Button 示例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(<span class="string">&quot;按钮&quot;</span>) &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;按钮被点击了&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们定义了按钮的文字<code>按钮</code>和点击的响应事件<code>print(&quot;按钮被点击了&quot;)</code>。除了这种方式，我们还可以使用另外一种常用的方式定义一个按钮：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;按钮被点击了&quot;</span>)</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">   <span class="type">Text</span>(<span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在后面的这种方式中，我们是使用一个<code>Text(&quot;按钮&quot;)</code> 作为按钮的<strong>label</strong>，这样做的好处是可以更多的自定义按钮标题的样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> &#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;按钮被点击了&quot;</span>)</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">     <span class="type">Text</span>(<span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">         .foregroundStyle(.black)</span><br><span class="line">         .background(.gray)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了使用<strong>Text</strong> 作为<strong>label</strong> 的要显示的内容，也可以使用其他的控件，例如<strong>Image</strong>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;apple.logo&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="按钮的样式"><a href="#按钮的样式" class="headerlink" title="按钮的样式"></a>按钮的样式</h3><p><strong>Button</strong>的风格可以通过<code> .buttonStyle</code> 修饰器来进行修改，我们可以定义以下的几种风格：</p>
<p><code>automatic</code>、<code>bordered</code>、<code>borderedProminent</code>、<code>borderless</code>和<code>plain</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">VStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;风格1&quot;</span>) &#123;</span><br><span class="line">                &#125;.buttonStyle(.automatic)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;automatic&quot;</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>))</span><br><span class="line">                    .foregroundStyle(.red)</span><br><span class="line">                    .fontWeight(.bold)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">VStack</span>(spacing:<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;风格2&quot;</span>) &#123;</span><br><span class="line">                &#125;.buttonStyle(.bordered)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;.bordered&quot;</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>))</span><br><span class="line">                    .foregroundStyle(.red)</span><br><span class="line">                    .fontWeight(.bold)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">VStack</span>(spacing:<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;风格3&quot;</span>) &#123;</span><br><span class="line">                &#125;.buttonStyle(.borderedProminent)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;.borderedProminent&quot;</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>))</span><br><span class="line">                    .foregroundStyle(.red)</span><br><span class="line">                    .fontWeight(.bold)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">VStack</span>(spacing:<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;风格4&quot;</span>) &#123;</span><br><span class="line">                &#125;.buttonStyle(.borderless)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;.borderless&quot;</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>))</span><br><span class="line">                    .foregroundStyle(.red)</span><br><span class="line">                    .fontWeight(.bold)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Divider</span>()</span><br><span class="line">            <span class="type">VStack</span>(spacing:<span class="number">10</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;风格5&quot;</span>) &#123;</span><br><span class="line">                &#125;.buttonStyle(.plain)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;.plain&quot;</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>))</span><br><span class="line">                    .foregroundStyle(.red)</span><br><span class="line">                    .fontWeight(.bold)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309071011683.png"  style="zoom:20%"/>

<h3 id="几种特殊的-Button"><a href="#几种特殊的-Button" class="headerlink" title="几种特殊的 Button"></a>几种特殊的 Button</h3><h4 id="EditButton"><a href="#EditButton" class="headerlink" title="EditButton"></a>EditButton</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">EditButton</span>()</span><br></pre></td></tr></table></figure>

<p><strong>EditButton</strong> 经常配合<strong>List</strong> 一起使用，实现<strong>List</strong> 的编辑功能。</p>
<h4 id="SignInWithAppleButton"><a href="#SignInWithAppleButton" class="headerlink" title="SignInWithAppleButton"></a>SignInWithAppleButton</h4><p>使用<strong>SignInWithAppleButton</strong> 按钮，我们可以快速实现使用 <strong>Apple ID</strong> 的快速登录和登出。</p>
<p>首先，如果需要使用<strong>SignInWithAppleButton</strong> 控件，需要导入<strong>AuthenticationServices</strong> 模块：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AuthenticationServices</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">SignInWithAppleButton</span>(.signIn,</span><br><span class="line">                                  onRequest: &#123; request <span class="keyword">in</span></span><br><span class="line">                <span class="comment">// 发起登录、登出请求</span></span><br><span class="line">                request.requestedScopes <span class="operator">=</span> [.fullName, .email]</span><br><span class="line">            &#125;,</span><br><span class="line">                                  onCompletion: &#123; result <span class="keyword">in</span></span><br><span class="line">                <span class="comment">// 请求完成后的回调</span></span><br><span class="line">                <span class="keyword">switch</span> result &#123;</span><br><span class="line">                <span class="keyword">case</span> .success(<span class="keyword">let</span> authResults):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Authorization successful.&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Authorization failed: &quot;</span> <span class="operator">+</span> error.localizedDescription)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .frame(width: <span class="number">200</span>, height: <span class="number">50</span>)</span><br><span class="line">            .signInWithAppleButtonStyle(.whiteOutline) <span class="comment">// 按钮的风格</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，<strong>SignInWithAppleButton</strong> 和普通的<strong>Button</strong> 不同，它可以根据我们的需要设置为<code>signIn</code>和<code>signUp</code>两种不同的状态，除此之外还需要实现两个回调。</p>
<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309071035663.png" style="zoom:20%"/>

<p><strong>SignInWithAppleButton</strong> 也可以使用 <code>signInWithAppleButtonStyle</code> 修饰器进行样式的定义，可以定义以下三种样式：</p>
<p><code>whiteOutline</code>、<code>black</code>、<code>white</code>。</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309071038752.png" style="zoom:20%"/>

<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://developer.apple.com/documentation/swiftui/button">Button | Apple Developer Documentation</a></p>
<p><a href="https://developer.apple.com/documentation/swiftui/editbutton/">EditButton | Apple Developer Documentation</a></p>
<p><a href="https://developer.apple.com/documentation/authenticationservices/signinwithapplebutton/">SignInWithAppleButton | Apple Developer Documentation</a></p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Button</tag>
        <tag>EditButton</tag>
        <tag>SignInWithAppleButton</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 List（一）</title>
    <url>/swift-blogs/posts/57a1224a.html</url>
    <content><![CDATA[<p>在很多 app 中，我们经常能看到上下滚动的列表，在 SwiftUI 中，我们可以使用<strong>List</strong> 实现这样的功能。</p>
<h4 id="创建一个列表"><a href="#创建一个列表" class="headerlink" title="创建一个列表"></a>创建一个列表</h4><p>要实现一个列表，我们需要先创建一个<strong>数组</strong>类型的数据源：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> books: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;西游记&quot;</span>, <span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;水浒传&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>使用 <code>ForEach</code> 遍历数组，将元素显示到 <code>List</code>中：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(books, id: \.<span class="keyword">self</span>) &#123; book <span class="keyword">in</span></span><br><span class="line">         <span class="type">Text</span>(<span class="string">&quot;《<span class="subst">\(book)</span>》&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 除了上面的这种方式，我们还可以直接将数据元给到<code>List</code>，然它进行循环创建列表：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(books, id: \.<span class="keyword">self</span>) &#123; book <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;《<span class="subst">\(book)</span>》&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们注意到，不管是我们使用哪种方式，我们都需要设置一个<code>id</code>的参数，这是因为<code>List</code> 要求每一行的元素都要有一个<span style="color:red"><strong>唯一</strong></span>的id，以便我们后续对<strong>List</strong> 进行编辑操作。这里我们是直接将循环出来的元素对象本身作为id 给它。</p>
<p><span style="color:red"><strong>注意，这在数据源中元素不会出现重复的情况下是可行，但是如果存在重复相同的元素，就会出现编辑异常的情况。</strong></span></p>
<span id="more"></span>

<h4 id="不同的-listStyle"><a href="#不同的-listStyle" class="headerlink" title="不同的 listStyle"></a>不同的 <code>listStyle</code></h4><p>我们可以通过 <code>listStyle</code> 修饰器来定义<strong>List</strong> 不同的风格样式，<code>insetGrouped</code>、<code>inset</code>、<code>grouped</code>、<code>plain</code>、<code>sidebar</code>、<code>automatic</code>。</p>
<p>注意，在不同的系统中样式显示也不一致。例如<code>sidebar</code> 样式在 iPadOS 中显示为侧边栏样式，在 iOS 中则为默认的样式。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.listStyle(.automatic)</span><br></pre></td></tr></table></figure>

<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309121039437.png"/>

<h4 id="List-分组和设置-footer-、-header"><a href="#List-分组和设置-footer-、-header" class="headerlink" title="List 分组和设置  footer 、 header"></a>List 分组和设置  footer 、 header</h4><p>如果我们想要实现 List 分组的效果，可以使用 <strong>Section</strong> ，然后<strong>Section</strong> 的构造方法分别给每个分组设置<strong>header</strong> 和<strong>footer</strong>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Section</span> &#123;</span><br><span class="line">        <span class="type">ForEach</span>(books, id: \.<span class="keyword">self</span>) &#123; book <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;《<span class="subst">\(book)</span>》&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; header: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;四大名著&quot;</span>)</span><br><span class="line">            .bold()</span><br><span class="line">    &#125; footer: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;推荐阅读书籍&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Section</span> &#123;</span><br><span class="line">        <span class="type">ForEach</span>(books, id: \.<span class="keyword">self</span>) &#123; book <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;《<span class="subst">\(book)</span>》&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; header: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;四大名著&quot;</span>)</span><br><span class="line">            .bold()</span><br><span class="line">    &#125; footer: &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;推荐阅读书籍&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309121055074.png" style="zoom:40%"/>

]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>List</tag>
        <tag>Identifier</tag>
        <tag>ForEach</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 List（二）</title>
    <url>/swift-blogs/posts/37193cc1.html</url>
    <content><![CDATA[<h4 id="创建-List"><a href="#创建-List" class="headerlink" title="创建 List"></a>创建 List</h4><p>在之前的<strong>List</strong> 使用中，我们是直接使用<code>ForEach</code> 循环遍历一个数组来实现的，在遍历的时候我们把<code>self</code> 作为<strong>List</strong>中必须的<strong>ID</strong>。接下来，我们通过自定义一个数据对象同时让它实现<code>Identifiable</code>。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Ocean</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name:  <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span> <span class="operator">=</span> <span class="type">UUID</span>().uuidString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们自定义了一个结构体类型的对象<code>Ocean</code> ，同时让它实现了<code>Identifiable</code> 协议。在实现这个协议之后，它需要结构体的有一个名为<code>id</code>的成员属性，然后这个属性的值我们直接通过<code>UUID().uuisString</code> 创建一个字符串类型的值给它，这样可以实现之后创建的每一个<code>Ocean</code> 实例对象都有一个<strong>唯一</strong>的<strong>ID</strong>，便于我们在<strong>List</strong> 遍历时使用。</p>
<span id="more"></span>

<p>同样地，使用数组的方式创建一些数据源。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> oceans <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Ocean</span>(name: <span class="string">&quot;Pacific&quot;</span>),</span><br><span class="line">    <span class="type">Ocean</span>(name: <span class="string">&quot;Atlantic&quot;</span>),</span><br><span class="line">    <span class="type">Ocean</span>(name: <span class="string">&quot;Indian&quot;</span>),</span><br><span class="line">    <span class="type">Ocean</span>(name: <span class="string">&quot;Southern&quot;</span>),</span><br><span class="line">    <span class="type">Ocean</span>(name: <span class="string">&quot;Arctic&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>使用<code>List</code> 和 <code>ForEach</code>创建一个<strong>List</strong>：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">ForEach</span>(oceans) &#123; ocean <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(ocean.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><span style="color:red">注意：</span>在上面的代码中，由于<code>ForEach</code>遍历的对象实现了<code>Identifiable</code>协议，所以我们就不再需要去单独设置<code>id</code>。</strong></p>
<p>或者可以直接讲数据源给到<code>List</code>来创建：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(oceans) &#123; ocean <span class="keyword">in</span></span><br><span class="line">    <span class="type">Text</span>(ocean.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码也可以通过语法进行简写：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(oceans) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="variable">$0</span>.name)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>简写前和简写后的效果是一样的，简写代码中的<code>$0</code>表示遍历的第一个参数，还可以有类似于<code>$1</code>、<code>$2</code> …等这样的形式。</p>
<h4 id="List-中的多选"><a href="#List-中的多选" class="headerlink" title="List 中的多选"></a>List 中的多选</h4><p>首先将<code>List</code>嵌套到<code>NavigationStack</code>中实现一个带顶部导航栏的样式：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationStack</span> &#123;</span><br><span class="line">    <span class="type">List</span>(oceans) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="variable">$0</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationTitle(<span class="string">&quot;Oceans&quot;</span>) <span class="comment">// 导航栏的标题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时，通过<code>toolBar</code>添加一个<code>EditButton</code> 按钮：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.toolbar &#123;</span><br><span class="line">                <span class="type">EditButton</span>()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> oceans <span class="operator">=</span> [</span><br><span class="line">        <span class="type">Ocean</span>(name: <span class="string">&quot;Pacific&quot;</span>),</span><br><span class="line">        <span class="type">Ocean</span>(name: <span class="string">&quot;Atlantic&quot;</span>),</span><br><span class="line">        <span class="type">Ocean</span>(name: <span class="string">&quot;Indian&quot;</span>),</span><br><span class="line">        <span class="type">Ocean</span>(name: <span class="string">&quot;Southern&quot;</span>),</span><br><span class="line">        <span class="type">Ocean</span>(name: <span class="string">&quot;Arctic&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> multiSelection <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span>(oceans, selection: <span class="variable">$multiSelection</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="variable">$0</span>.name)</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Oceans&quot;</span>) <span class="comment">// 导航栏的标题</span></span><br><span class="line">            .toolbar &#123;</span><br><span class="line">                <span class="type">EditButton</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;当前选中：<span class="subst">\(multiSelection.count)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，实现了一下几步：</p>
<ol>
<li>通过<code>NavigationStack</code> 实现了导航栏；</li>
<li>在<code>toolBar</code>上添加了一个<code>EditButton</code>，当点击 <strong>EditButton</strong>后<strong>List</strong> 将进入<strong>可编辑模式</strong>；</li>
<li>使用<code>@State</code> 定义了一个元素类型和<code>Ocean</code> 中<code>id</code> 类型（<strong>String</strong>）一致的动态元祖变量，然后将这个变量和<strong>List</strong>中的<code>selection</code>绑定，当 <strong>List</strong> 进入编辑模式之后我们就可以获取到被选中的<strong>List</strong>中<strong>唯一</strong>的<strong>ID</strong>。</li>
</ol>
<p>效果如下：</p>
<p><video width="30%" height="50%" controls="controls" src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309161014389.mp4"> </video></p>
<h4 id="List-的下拉刷新加载"><a href="#List-的下拉刷新加载" class="headerlink" title="List 的下拉刷新加载"></a>List 的下拉刷新加载</h4><p>首先将数据源<code>oceans</code> 使用<code>@State</code> 声明为动态的响应式类型：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> oceans <span class="operator">=</span> [</span><br><span class="line">       <span class="type">Ocean</span>(name: <span class="string">&quot;Pacific&quot;</span>),</span><br><span class="line">       <span class="type">Ocean</span>(name: <span class="string">&quot;Atlantic&quot;</span>),</span><br><span class="line">       <span class="type">Ocean</span>(name: <span class="string">&quot;Indian&quot;</span>),</span><br><span class="line">       <span class="type">Ocean</span>(name: <span class="string">&quot;Southern&quot;</span>),</span><br><span class="line">       <span class="type">Ocean</span>(name: <span class="string">&quot;Arctic&quot;</span>)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure>

<p>然后给<code>List</code>添加一个<code>refreshable </code>修饰器：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.refreshable &#123;</span><br><span class="line">                <span class="comment">// 每次刷新向 oceans 数组中添加一个新的元素</span></span><br><span class="line">                oceans.append(.<span class="keyword">init</span>(name: <span class="string">&quot;Other&quot;</span>))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>此时，当程序运行后，每次下拉刷新<strong>List</strong> 中都将添加一个新的名为<code>Other</code> 的元素。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>EditButton</tag>
        <tag>List</tag>
        <tag>Identifier</tag>
        <tag>NavigationStack</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 NavigationStack</title>
    <url>/swift-blogs/posts/80d98b55.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>NavigationStack</strong> 用来作为一个根视图（root view）使得我们能够将一个新的视图展示在这个根视图上。</p>
<h3 id="创建一个带导航栏和标题的app"><a href="#创建一个带导航栏和标题的app" class="headerlink" title="创建一个带导航栏和标题的app"></a>创建一个带导航栏和标题的app</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationStack</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span>,id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;当前行<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;导航栏标题&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在上面的代码中，</p>
<ol>
<li>将一个<code>NavigationStack</code> 作为整个页面的根视图；</li>
<li>给 <code>NavigationStack</code> 的第一个子视图<code>List</code>添加<code>navigationTitle</code>修饰器，<span style="color:red"><strong>注意，</strong></span>这个修饰器的作为就是给导航栏添加标题。</li>
<li>使用<code>ForEach</code>创建<code>List</code>的显示内容。</li>
</ol>
<p>此时，效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309201401648.png" style="zoom:20%"/>

<h3 id="导航栏风格"><a href="#导航栏风格" class="headerlink" title="导航栏风格"></a>导航栏风格</h3><p>在默认情况下，iOS 中的导航栏为大标题的样式。可以通过<code>navigationBarTitleDisplayMode</code>修改标题的样式：</p>
<ul>
<li><code>inline</code>：小标题样式，之前 UIKit中常用的样式；</li>
<li><code>larget</code>：大标题样式，SwiftUI app 中的默认样式。</li>
</ul>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309201404954.png" style="zoom:20%"/>

<p>不过，即使在大标题的样式下，当我们向下滑动时，当标题样式也会变为小标题样式，向上滑动到顶部时又会重新变为原来的样式。</p>
<h3 id="使用NavigationLink-实现页面跳转和展示"><a href="#使用NavigationLink-实现页面跳转和展示" class="headerlink" title="使用NavigationLink 实现页面跳转和展示"></a>使用NavigationLink 实现页面跳转和展示</h3><p>文章开头我们说过，使用<code>NavigationStack</code>作为根视图来实现页面的展示。要想实现其他视图的展示或者常见的导航栏页面跳转需要和<code>NavigationLink</code>一起使用。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationLink</span> &#123;</span><br><span class="line">    <span class="comment">// 要展示的视图</span></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;当前页面<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">&#125; label: &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;当前行<span class="subst">\(index)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，我们使用的是<code> NavigationLink(destination: () -&gt; View, label: () -&gt; View)</code>函数，<code>destination</code>参数表示的展示的视图，<code>label</code>表示通过那个视图来触发展示的内容，即被点击的视图。</p>
<p>当我们添加了<code>NavigationLink</code>之后，<code>List</code>中的每一行视图都会变成可点击的样式，然后我们点击任意一行之后都将跳转或者展示对应的页面。具体效果如下：</p>
<p><video src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309201433629.mp4" width="30%" height="50%" controls="controls"></video></p>
<p>在上面的演示效果中，我们会发现，当我们进入展示的目标视图页面，目标视图页面本身也会带上导航栏并且自带返回功能。</p>
<p><span style="color:red"><strong>注意，</strong></span>在一些旧版本的 SwiftUI 代码中，使用的是<code>NavigationView</code>实现相同的功能，目前<code>NavigationView</code>已被逐步放弃，官方更推荐我们使用<code>NavigationLink</code>。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>NavigationStack</tag>
        <tag>NavigationLink</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 ScrollView(二)</title>
    <url>/swift-blogs/posts/ff84e235.html</url>
    <content><![CDATA[<h3 id="实现快速滚动到顶部或底部的效果"><a href="#实现快速滚动到顶部或底部的效果" class="headerlink" title="实现快速滚动到顶部或底部的效果"></a>实现快速滚动到顶部或底部的效果</h3><p>在很多的<strong>ScrollView</strong> 的应用中，我们经常见到点击“回到顶部”按钮实现快速回到顶部的效果。</p>
<p>在 SwiftUI中，如果我们想要实现这样的效果，我们可以使用<strong>ScrollViewRader</strong>和<strong>ScrollView</strong>来实现。<strong>ScrollViewRader</strong>可以让我们通过编程的方式实现滚动到一个已知的子视图的位置。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">var</span> topID</span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">var</span> bottomID</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollViewReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">            <span class="type">ScrollView</span> &#123;</span><br><span class="line">                <span class="comment">// 顶部的按钮</span></span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    withAnimation &#123;</span><br><span class="line">                        proxy.scrollTo(bottomID)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;滚动到底部&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .id(topID)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 滚动视图</span></span><br><span class="line">                <span class="type">VStack</span>(spacing: <span class="number">0.1</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123;i <span class="keyword">in</span></span><br><span class="line">                        color(fraction: <span class="type">Double</span>(i) <span class="operator">/</span> <span class="number">100</span>)</span><br><span class="line">                            .frame(height: <span class="number">32</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 顶部的按钮</span></span><br><span class="line">                <span class="type">Button</span>(action: &#123;</span><br><span class="line">                    withAnimation &#123;</span><br><span class="line">                        proxy.scrollTo(topID)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;滚动到顶部&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                &#125;)</span><br><span class="line">                .id(bottomID)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建颜色</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">color</span>(<span class="params">fraction</span>: <span class="type">Double</span>) -&gt; <span class="type">Color</span> &#123;</span><br><span class="line">        <span class="type">Color</span>(red: fraction, green: <span class="number">1</span> <span class="operator">-</span> fraction, blue: <span class="number">0.5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在上面的示例代码中，实现了一下几个步骤：</p>
<ol>
<li>在<code>ScrollView</code>外面嵌套了一层<code>ScrollViewReader</code>；</li>
<li><code>ScrollView</code>的子视图包括顶部按钮、 100 个渐变颜色子视图和底部按钮是三个部分；</li>
<li>使用<code>@NameSpace</code>创建了<code>topID</code> 和<code>bottomID</code> 两个变量，然后将它们分别给到顶部和底部按钮；</li>
<li>利用<code>ScrollViewRader</code> 提供的<code>proxy</code> 在点击两个按钮的时候滚动到指定的 ID 的子视图位置。</li>
</ol>
<p>效果如下：</p>
<p><video src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309180948602.mp4" width="30%" height="50%" controls="controls"></video></p>
<h3 id="实现滚动到指定索引的位置"><a href="#实现滚动到指定索引的位置" class="headerlink" title="实现滚动到指定索引的位置"></a>实现滚动到指定索引的位置</h3><p>创建一个数据结构：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NameModel</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span> <span class="operator">=</span> <span class="type">UUID</span>().uuidString</span><br><span class="line">    <span class="keyword">let</span> index: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成一些测试使用的数据源：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据源</span></span><br><span class="line"><span class="keyword">var</span> nameDatas:[<span class="type">NameModel</span>] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        (<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>).map &#123;</span><br><span class="line">            <span class="type">NameModel</span>(name: <span class="string">&quot;我是-<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>, index: <span class="variable">$0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>界面布局：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">       <span class="type">ScrollViewReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">           <span class="type">ScrollView</span> &#123;</span><br><span class="line">               <span class="type">Button</span>(action: &#123;</span><br><span class="line">                   withAnimation &#123;</span><br><span class="line">                       proxy.scrollTo(nameDatas[scrollToIndex].index)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;, label: &#123;</span><br><span class="line">                   <span class="type">Text</span>(<span class="string">&quot;滚动到索引为<span class="subst">\(scrollToIndex)</span>的地方&quot;</span>)</span><br><span class="line">               &#125;)</span><br><span class="line">               <span class="type">ForEach</span>(nameDatas) &#123; data <span class="keyword">in</span></span><br><span class="line">                   <span class="type">Text</span>(data.name)</span><br><span class="line">                       .padding(<span class="number">4</span>)</span><br><span class="line">                       .id(data.index)</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>此时的效果为当我们点击按钮后，<strong>ScrollView</strong>将滚动到子视图 ID为 70 的位置：</p>
<p><video src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309181236721.mp4" width="30%" height="50%" controls="controls"></video></p>
<p><span style="color:red"><strong>注意：</strong></span>这里目前依然存在一个问题，当我们使用数据模型的<code>id</code>属性作为<strong>ScrollView</strong>子视图的ID 时，即 <code>.id(data.id)</code>，无法实现类似的效果。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>ScrollView</tag>
        <tag>ScrollViewReader</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 Picker</title>
    <url>/swift-blogs/posts/bd95df5.html</url>
    <content><![CDATA[<p>在我们做一些信息表单填写时，经常需要用到<strong>选择器（Picker）</strong>。</p>
<h3 id="创建-Picker"><a href="#创建-Picker" class="headerlink" title="创建 Picker"></a>创建 Picker</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Picker</span>(<span class="string">&quot;今天周几&quot;</span>,  selection: <span class="variable">$selectedOptions</span>) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期一&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期二&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期三&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期四&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期五&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期六&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期天&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@State</code>创建一个动态响应的变量，用于和<code>Picker</code>进行绑定，当选中某一项时，这个变量对应的值也会发生变化。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> selectedOptions:<span class="type">Int</span> <span class="operator">=</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>此时默认的效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309240934896.png" style="zoom:50%"/>

<p>但是如果我们此时选择任意一个其他的选项，发现并没有什么变化，而且控制台会输入下面的信息：</p>
<p><span style="color:red"><strong>Picker: the selection “0” is invalid and does not have an associated tag, this will give undefined results.</strong></span></p>
<span id="more"></span>

<p>这是因为我们没有给<code>Picker</code>的每一个选项设置一个不同的<code>Tag</code>值，我们只需要做下面的修改就可以解决这个问题。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Picker</span>(<span class="string">&quot;今天周几&quot;</span>,  selection: <span class="variable">$selectedOptions</span>) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期一&quot;</span>)</span><br><span class="line">        .tag(<span class="number">0</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期二&quot;</span>)</span><br><span class="line">        .tag(<span class="number">1</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期三&quot;</span>)</span><br><span class="line">        .tag(<span class="number">2</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期四&quot;</span>)</span><br><span class="line">        .tag(<span class="number">3</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期五&quot;</span>)</span><br><span class="line">        .tag(<span class="number">4</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期六&quot;</span>)</span><br><span class="line">        .tag(<span class="number">5</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;星期天&quot;</span>)</span><br><span class="line">        .tag(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样解释了为什么我们在声明绑定的动态变量<code>selectedOptions</code>时，将它声明为<code>Int</code>类型了。</p>
<h3 id="使用循环遍历的方式创建选项"><a href="#使用循环遍历的方式创建选项" class="headerlink" title="使用循环遍历的方式创建选项"></a>使用循环遍历的方式创建选项</h3><p>在上面的示例中，我们都是直接定义每个选项的内容，当我们的选项很多的时候我们可以使用<code>ForEach</code>循环创建选项：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Picker</span>(<span class="string">&quot;今天周几&quot;</span>,  selection: <span class="variable">$selectedOptions</span>) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">7</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;选项<span class="subst">\(index<span class="operator">+</span><span class="number">1</span>)</span>&quot;</span>)</span><br><span class="line">            .tag(index)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们直接使用每次循环的索引作为选项的<code>Tag</code>值。</p>
<h3 id="设置-Picker的不同风格"><a href="#设置-Picker的不同风格" class="headerlink" title="设置 Picker的不同风格"></a>设置 Picker的不同风格</h3><p>和 SwiftUI 中很多其他的控件一样，<strong>Picker</strong>也提供了很多的样式，我们可以通过<code>pickerStyle</code>进行设置。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Picker</span>(<span class="string">&quot;今天周几&quot;</span>,  selection: <span class="variable">$selectedOptions</span>) &#123;</span><br><span class="line">                   <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">7</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                       <span class="type">Text</span>(<span class="string">&quot;选项<span class="subst">\(index<span class="operator">+</span><span class="number">1</span>)</span>&quot;</span>)</span><br><span class="line">                           .tag(index)</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               .pickerStyle(.inline)</span><br></pre></td></tr></table></figure>

<p>我们可以设置这些风格 <code>inline</code>、<code>segmented</code>、<code>wheel</code>、<code>palette</code>、<code>menu</code>、<code>navigationLink</code>。</p>
<p>不同风格的样式呈现如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309241012504.png" style="zoom:20%"/>

<p><span style="color:red"><strong>注意：</strong></span>，<code>navigationLinke</code>样式需要和 <strong>NavigationStack</strong> 一起配合使用，即在父视图外面嵌套一个<code>NavigationStack</code>，具体如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationStack</span> &#123;</span><br><span class="line">    <span class="type">Picker</span>(<span class="string">&quot;今天周几&quot;</span>,  selection: <span class="variable">$selectedOptions</span>) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">7</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;选项<span class="subst">\(index<span class="operator">+</span><span class="number">1</span>)</span>&quot;</span>)</span><br><span class="line">                .tag(index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .pickerStyle(.navigationLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的展示效果如下：</p>
<p><video src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309241054945.mp4" width="20%" height="50%" controls="controls"> </video></p>
<p>除了基础的<strong>Picker</strong>外，还有<strong>DatePicker（日期选择器）</strong> 和 <strong>ColorPicker（颜色选择器）</strong>，我们将在后面的内容中详细介绍它们的使用。</p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>Picker</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI控件之 TextField</title>
    <url>/swift-blogs/posts/edbc1019.html</url>
    <content><![CDATA[<p>在 SwiftUI 中，<strong>TextField</strong> 用来展示和接收用户编辑的文本内容。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在创建一个<strong>TextField</strong>之前，需要先定义一个<strong>响应式</strong>类型的状态变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> userName:<span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>在创建<strong>TextField</strong> 时，使用<code>$userName</code> 的形式绑定这个状态变量：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TextField</span>(<span class="string">&quot;User Name&quot;</span>,text: <span class="variable">$userName</span>)</span><br></pre></td></tr></table></figure>

<p>当<code>userName</code> 这个变量和<strong>TextField</strong> 绑定后，当我们在输入框中输入或者删除内容时，<code>userName</code> 对应的值也会跟着发生变化。</p>
<span id="more"></span>

<h4 id="TextField-的不同风格"><a href="#TextField-的不同风格" class="headerlink" title="TextField 的不同风格"></a>TextField 的不同风格</h4><p>使用<code>textFieldStyle</code> 修饰器来定义<strong>TextField</strong>的不同风格：</p>
<ul>
<li><code>roundedBorder</code>： 圆角边框样式；</li>
<li><code>plain</code> ： 默认的无边框样式；</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;User Name&quot;</span>,text: <span class="variable">$userName</span>)</span><br><span class="line">        .textFieldStyle(.roundedBorder)</span><br><span class="line">    </span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;User Name&quot;</span>,text: <span class="variable">$userName</span>)</span><br><span class="line">        .textFieldStyle(.plain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309131432602.png"/>

<h4 id="SecureField"><a href="#SecureField" class="headerlink" title="SecureField"></a>SecureField</h4><p>除了常见的<strong>TextField</strong> ，还可以使用<strong>SecureField</strong> 来获取一些隐私数据的输入，例如密码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">SecureField</span>(<span class="string">&quot;Password&quot;</span>,text: <span class="variable">$password</span>)</span><br></pre></td></tr></table></figure>

<p>使用安全输入框时，当用户输入类似于密码之类的隐私数据时，会以**<code>····</code>** 形式呈现，从而起到保护隐私数据的作用。</p>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://developer.apple.com/documentation/swiftui/textfield">TextField | Apple Developer Documentation</a></p>
<p><a href="https://developer.apple.com/documentation/swiftui/securefield">SecureField | Apple Developer Documentation</a></p>
]]></content>
      <categories>
        <category>SwiftUI 基础</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>TextField</tag>
        <tag>SecureField</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift中的函数</title>
    <url>/swift-blogs/posts/66bf2022.html</url>
    <content><![CDATA[<h3 id="认识函数"><a href="#认识函数" class="headerlink" title="认识函数"></a>认识函数</h3><p>函数是一段独立的代码块，用来执行一些特定的操作。我们可以通过给函数一个名字来定义它的功能，当我们需要执行这段代码块的时候通过函数的名字来进行调用。</p>
<h4 id="定义和调用函数"><a href="#定义和调用函数" class="headerlink" title="定义和调用函数"></a>定义和调用函数</h4><p>定义函数使用关键字<strong>func</strong>,每个函数都需要有一个函数名，它描述函数执行的任务。<br>下面我们定义一个函数名为<code>sayHi</code>的函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHi</span>()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">sayHi()</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="带参数和返回值的函数"><a href="#带参数和返回值的函数" class="headerlink" title="带参数和返回值的函数"></a>带参数和返回值的函数</h4><p>在一些特定的情况下，我们需要给函数传入一些数据，传入的数据我们称之为<strong>参数</strong>。另外，我们也可能需要函数给我们返回一些代码块执行的结果，这就是<strong>返回值</strong>。</p>
<h5 id="带参数的函数"><a href="#带参数的函数" class="headerlink" title="带参数的函数"></a>带参数的函数</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHi</span>(<span class="params">name</span>:<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好，<span class="subst">\(name)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在定义带参数的函数时，需要声明参数的数据类型，声明的方式类似于变量的声明，但是不需要加<strong>var</strong>关键字。</p>
<p>调用带参函数：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">sayHi(<span class="string">&quot;Felix&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，在调用函数的时候，传入的参数类型要和函数定义时的数据类型一致。上面的实例中参数的数据类型是<strong>String</strong>类型，所以函数调用是我们只能传入一个字符串。</p>
</blockquote>
<h5 id="带返回值的函数"><a href="#带返回值的函数" class="headerlink" title="带返回值的函数"></a>带返回值的函数</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sayHi</span>() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义带返回值的函数我们需要使用返回箭头<code>-&gt;</code>箭头后面跟的是返回值的数据类型。另外，在代码块执行结束后我们需要使用<strong>return</strong>关键字返回数据。</p>
<p>函数调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let result = sayHi()</span><br></pre></td></tr></table></figure>

<p>在调用带返回值的函数时，我们一般会把返回的结果赋给一个常量，以便之后使用。当然我们也可以直接使用<strong>print</strong>直接将结果打印。<code>print(sayHi())</code></p>
<h5 id="同时带参数和返回值的函数"><a href="#同时带参数和返回值的函数" class="headerlink" title="同时带参数和返回值的函数"></a>同时带参数和返回值的函数</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">a</span>:<span class="type">Int</span>,<span class="params">b</span>:<span class="type">Int</span>) -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的实例中我们定义来一个求和函数来计算任何两个整数的值，并将求和后的结果返回。另外，这个函数定义了两个参数，所以函数调用的时候需要传入两个参数。</p>
<p>函数调用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sum(a: <span class="number">100</span>, b: <span class="number">24</span>))</span><br></pre></td></tr></table></figure>

<h5 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">calculate</span>(<span class="params">a</span>:<span class="type">Int</span>,<span class="params">b</span>:<span class="type">Int</span>) -&gt; (sum:<span class="type">Int</span>,sub:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> a <span class="operator">+</span> b</span><br><span class="line">    <span class="keyword">let</span> sub <span class="operator">=</span> a <span class="operator">-</span> b</span><br><span class="line">    <span class="keyword">return</span> (sum,sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个计算函数，我们分别计算传入的两个参数的和与差，然后将和与差返回。</p>
<p>函数调用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> calculate(a: <span class="number">102</span>, b: <span class="number">23</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两数之和为：<span class="subst">\(result.sum)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两数之差为：<span class="subst">\(result.sub)</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">两数之和为：<span class="number">125</span></span><br><span class="line">两数之差为：<span class="number">79</span></span><br></pre></td></tr></table></figure>

<h4 id="函数的实际参数标签和形式参数名"><a href="#函数的实际参数标签和形式参数名" class="headerlink" title="函数的实际参数标签和形式参数名"></a>函数的实际参数标签和形式参数名</h4><p>每个函数的形式参数都包含实际参数标签和形式参数名。实际参数标签在函数调用的时候使用，形式参数名在函数的内部使用。默认情况下，Swift使用形式参数名作为实际参数标签，在上面所有的函数定义中，我们都没有特别声明实际参数标签。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">calculate</span>(<span class="params">first</span> <span class="params">a</span>:<span class="type">Int</span>, <span class="params">second</span> <span class="params">b</span>:<span class="type">Int</span>) -&gt; (sum:<span class="type">Int</span>,sub:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> a <span class="operator">+</span> b</span><br><span class="line">    <span class="keyword">let</span> sub <span class="operator">=</span> a <span class="operator">-</span> b</span><br><span class="line">    <span class="keyword">return</span> (sum,sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的实例中<code>second</code>和<code>first</code>就是实际参数标签，<code>a</code>和<code>b</code>就是形式参数名。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> calculate(first: <span class="number">102</span>, second: <span class="number">23</span>)</span><br></pre></td></tr></table></figure>

<p>我们注意到，我们在进行函数调用的时候使用的实际参数标签。使用实际参数标签可以帮助我们提高代码的可读性。</p>
<h5 id="省略实际参数标签"><a href="#省略实际参数标签" class="headerlink" title="省略实际参数标签"></a>省略实际参数标签</h5><p>在某些情况下，我们可能想要在调用函数的时候省略实际参数标签，那么我们可以借助<code>_</code>通配符实现。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">calculate</span>(<span class="keyword">_</span> <span class="params">a</span>:<span class="type">Int</span>, <span class="keyword">_</span> <span class="params">b</span>:<span class="type">Int</span>) -&gt; (sum:<span class="type">Int</span>,sub:<span class="type">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> sum <span class="operator">=</span> a <span class="operator">+</span> b</span><br><span class="line">    <span class="keyword">let</span> sub <span class="operator">=</span> a <span class="operator">-</span> b</span><br><span class="line">    <span class="keyword">return</span> (sum,sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数调用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> calculate(<span class="number">102</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到，在函数调用的时候我们已经可以不用写实际参数标签了。</p>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift中的条件语句</title>
    <url>/swift-blogs/posts/964c101d.html</url>
    <content><![CDATA[<p>Swift提供了<strong>if</strong>和<strong>switch</strong>两种条件语句，<code>if</code>语句用来判断简单的条件，<code>switch</code>语句适合复杂的条件。</p>
<span id="more"></span>

<h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>当只有一个单一的条件时：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span>(a<span class="operator">&lt;</span><span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于10&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>if</strong>语句也提供else分句，当条件为false时使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span>(a<span class="operator">&lt;</span><span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于或等于10&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当需要判断多个条件时，可以使用<strong>else-if</strong>配合if语句使用：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">if</span>(a<span class="operator">&lt;</span><span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a<span class="operator">&gt;</span><span class="number">10</span>)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;等于10&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>每一个 <code>switch</code> 语句都由多个可能的情况组成，每一个情况都以 case 关键字开始。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">A</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">switch</span> <span class="type">A</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;q&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;常量A等于字符串q&quot;</span>)</span><br><span class="line"><span class="keyword">case</span>  <span class="string">&quot;a&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;常量A等于字符串a&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;其他字符&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常量A等于字符串a</span><br></pre></td></tr></table></figure>

<p><code>switch</code>语句要求仅可能的提供所有可能的值，但是当我们无法对所有可能的情况进行判断时，我们可以时关键字<strong>default</strong>进行标记，这表示其他没有提供的情况执行这部分的代码块。</p>
<h5 id="多条件的匹配："><a href="#多条件的匹配：" class="headerlink" title="多条件的匹配："></a>多条件的匹配：</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">A</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">switch</span> <span class="type">A</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;q&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;常量A等于字符串q&quot;</span>)</span><br><span class="line"><span class="keyword">case</span>  <span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;常量A等于字符串a或b&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;其他字符&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们在<code>case</code>后面添加了一个新的条件，条件之间使用逗号隔开。当常量A等于”a”或”b”时执行的结果都是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常量A等于字符串a或b</span><br></pre></td></tr></table></figure>

<h5 id="区间匹配："><a href="#区间匹配：" class="headerlink" title="区间匹配："></a>区间匹配：</h5><p><code>switch</code>语句也可以配个区间运算符一起使用。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">23</span></span><br><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="operator">..&lt;</span><span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a小于0&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于等于0小于10&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span><span class="operator">..&lt;</span><span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于等于10小于100&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a大于或等于100&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">a大于等于<span class="number">10</span>小于<span class="number">100</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Swift 基础语法</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>条件语句</tag>
      </tags>
  </entry>
  <entry>
    <title>工欲善其事，必先利其器（Xcode 常见设置）</title>
    <url>/swift-blogs/posts/b2a2499d.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="Xcode-基础设置"><a href="#Xcode-基础设置" class="headerlink" title="Xcode 基础设置"></a>Xcode 基础设置</h2><h3 id="设置代码编辑器的字体和整体样式"><a href="#设置代码编辑器的字体和整体样式" class="headerlink" title="设置代码编辑器的字体和整体样式"></a>设置代码编辑器的字体和整体样式</h3><p>创建好项目之后，使用快捷 <strong><code>Command + ,</code></strong> 或者顶部菜单栏的 <strong>Xcode→Settings</strong> 打开Xcode的偏好设置，在 <strong>Themes</strong> 主题选项部分可以选择或者设置代码编辑器的代码风格和字体大小：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309061748945.png" style="zoom:30%"/>

<span id="more"></span>

<p>另外一个常用的设置是 <strong>显示&#x2F;隐藏</strong> 文件的扩展名，也可以根据需要指定需要隐藏&#x2F;显示 的文件类型：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309061749630.png" style="zoom:80%"/>

<p>显示文件扩展名：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309061750955.png"/>

<p> 隐藏文件扩展名：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309061751694.png"/>

<h3 id="Xcode-整体布局设置"><a href="#Xcode-整体布局设置" class="headerlink" title="Xcode 整体布局设置"></a>Xcode 整体布局设置</h3><p><strong>显示&#x2F;隐藏</strong> SwiftUI项目的预览区：</p>
<p>在Xcode的右上角部分，点击从右往左数的第二个图标，<strong>选中&#x2F;取消选中</strong> <strong>Canvas  选项即可显示或关闭预览区：</strong></p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202309061752415.png" style="zoom:30%"/>

<p>另一个比较常用的设置是代码区域的预览小地图，按照上面的方式勾选 <strong>Minimap</strong> 即可在代码编辑区域的右上角显示代码预览，当一个代码文件的代码行数很多时，我们可以通过快速点击预览到达指定的代码位置。</p>
<p>上面的设置是我们比较常用，同时也是能极大提升我们开发效率的设置，随着对Xcode越来越熟悉也可以逐渐了解Xcode中更多的使用技巧。</p>
<p>除了上面的一些基础设置，接着我们来介绍几个Xcode中常用的快捷键：</p>
<ul>
<li><code>Command + B</code> ： 快速进行项目的编译，可以在不运行的情况下检查我们的代码编写是否存在错误；</li>
<li><code>Command + R</code> ： 在指定模拟下运行项目；</li>
<li><code>Command + N</code> ： 在项目中创建一个文件；</li>
<li><code>Command + Option + P</code> ：重新加载SwiftUI的预览界面。在默认情况下，我们在代码区域编写完成SwiftUI的代码后，右边的预览区域会自动进行加载，但是当我们的SwiftUI代码很多或者自动加载失败时就可以使用这个快捷方式重新快速加载预览而无须通过鼠标点击的方式进行。</li>
</ul>
]]></content>
      <categories>
        <category>Xcode 使用技巧</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>在SwiftUI 中创建一个内容切换效果</title>
    <url>/swift-blogs/posts/d4605c9a.html</url>
    <content><![CDATA[<h3 id="文字内容切换效果"><a href="#文字内容切换效果" class="headerlink" title="文字内容切换效果"></a>文字内容切换效果</h3><p>界面布局：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> text: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;$<span class="subst">\(text)</span>&quot;</span>)</span><br><span class="line">                .font(.largeTitle.bold())</span><br><span class="line">                .contentTransition(.numericText(value: <span class="type">Double</span>(text)))</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                withAnimation(.bouncy) &#123;</span><br><span class="line">                    text <span class="operator">=</span> .random(in: <span class="number">100</span><span class="operator">...</span><span class="number">10000</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Update&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202308291020904.mp4" style="zoom:20%"></img></p>
<span id="more"></span> 

<p><span style="color:red"><strong>注意</strong></span>：<code>contentTransition</code> 修饰器的系统要求为： <code>@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)</code>。</p>
<h3 id="SF-Symbol-切换效果"><a href="#SF-Symbol-切换效果" class="headerlink" title="SF Symbol 切换效果"></a>SF Symbol 切换效果</h3><p>界面布局：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> sfImage: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;house.fill&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> sfCount: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: sfImage)</span><br><span class="line">                .font(.largeTitle.bold())</span><br><span class="line">                .contentTransition(.symbolEffect(.automatic))</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> images:[<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;suit.heart.fill&quot;</span>, <span class="string">&quot;house.fill&quot;</span>, <span class="string">&quot;gearshape&quot;</span>, <span class="string">&quot;person.circle.fill&quot;</span>, <span class="string">&quot;iphone&quot;</span>, <span class="string">&quot;macbook&quot;</span>]</span><br><span class="line">                withAnimation(.bouncy) &#123;</span><br><span class="line">                   sfCount <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                    sfImage <span class="operator">=</span> images[sfCount <span class="operator">%</span> images.count]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Update&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img data-src="https://swift-blogs.oss-cn-shanghai.aliyuncs.com/202308291039418.mp4"  style="zoom:20%"/>

<p><span style="color:red"><strong>注意</strong></span>：</p>
<ul>
<li><p><code>contentTransition</code> 修饰器的系统要求为： <code>@available(iOS 16.0, macOS 13.0, tvOS 16.0, watchOS 9.0, *)</code>;</p>
</li>
<li><p><code>symbolEffect</code> 修饰器的系统要求为：<code>@available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *)</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>SwiftUI 进阶</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>SF Symbol</tag>
        <tag>动画</tag>
      </tags>
  </entry>
</search>
